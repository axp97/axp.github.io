<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>观《人间世 第一季》</title>
      <link href="2021/09/20/book/video/ren-jian-shi/"/>
      <url>2021/09/20/book/video/ren-jian-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="影片整体谈了什么？"><a href="#影片整体谈了什么？" class="headerlink" title="影片整体谈了什么？"></a>影片整体谈了什么？</h3><p>&emsp;&emsp;是一部关于医院新闻纪录片，该片以医院为拍摄原点，聚焦医患双方面临病痛、生死考验时的重大选择，展现了一个真实的人间世态。</p><p><a href="https://movie.douban.com/subject/26815163/" target="_blank" rel="noopener">豆瓣传送门 - 人间世</a></p><h3 id="细部说了什么？"><a href="#细部说了什么？" class="headerlink" title="细部说了什么？"></a>细部说了什么？</h3><p>&emsp;&emsp;第一视角展现了医生的辛苦，然后在其中我看到更多的是世事无常，人类在疾病和意外之前弱小且无助。幸运地抓到不错的牌的话，也有衰老和死亡在前边等待。</p><p>&emsp;&emsp;生是偶然，死是必然。有必要了解死亡，才能豪无旁骛地往前走，去更好的生活。</p><h3 id="它与我关系是什么？"><a href="#它与我关系是什么？" class="headerlink" title="它与我关系是什么？"></a>它与我关系是什么？</h3><p>&emsp;&emsp;在 b 站上点开纪录片看到这部片子，毫不犹豫点了进去。端午奶奶逝去，自责后悔等复杂情绪一直萦绕，想看看别人如何看待的生老病死。</p><p>&emsp;&emsp;从 3 月底，得知奶奶癌症的消息，不可置信到 4 月初大医院确诊胰腺癌，医生说最多三个月的寿命。就像影片里张丽君一样，第一反应也是好想好想有奇迹发生。年事已高，医生建议姑息治疗，奇迹当然也没有发生。4 月到 5 月中是真的难熬，一边闲钱刚报了课程，一边正好打算换工作，还扛着家里房贷。从小形成的思维一遍一遍提醒我：你回去也做不了什么。一不小心就能哭出来，回想挺感谢男朋友的凶我，你想回去就回去看阿，管你能做什么。于是一遍遍问自己，我想要什么，辞了职，买票回家。大概是工作以来最任性的一次。</p><p>&emsp;&emsp;跟奶奶第一天还搭了话，后面几乎没交流过什么了，肉眼能见的一天比一天情况差。爱美的奶奶原来头发常染成黑色，病了后花白的头发。报了驾校，内心还是抱着点点期待，小时候逢人说以后坐小汽车靠这女孩呢，我能考到的，奶奶之后还要坐我车车呢。能不能等等我。读小学妈妈带我去上学，说您泪水涟涟，我都没回头，真对不起。结果后来，我还是很少回家，过年都不回家，一直固执地漂在外边都不认为这是家，多想回到过去告诉我自己，有家人即是家啊。我总以为，等等我，我会回来。我去挑好吃的糕点，去买暖和的围巾，就是固执不回来。对不起。甚至回想，工作以来几年了，因为没回家一个红包都未给过。对不起。怎么可以让长辈等待。</p><p>&emsp;&emsp;放弃，我的放弃大概是从手脚肿胀窟窿出血开始，奶奶大部分时间在昏睡，发出呻吟。开始想，怎么样才是生。<strong>从未想过，珍惜竟然真的需要痛苦失去才能明白。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 书影音 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
            <tag> 纪录片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《人生的智慧》</title>
      <link href="2021/09/12/book/other/ren-sheng-de-zhi-hui/"/>
      <url>2021/09/12/book/other/ren-sheng-de-zhi-hui/</url>
      
        <content type="html"><![CDATA[<h3 id="这本书整体谈了什么？"><a href="#这本书整体谈了什么？" class="headerlink" title="这本书整体谈了什么？"></a>这本书整体谈了什么？</h3><p>&emsp;&emsp;第一本哲学书：本书告诉读者如何尽可能地过的幸福快乐，人们追求物质和渴望，但是内心得来的快乐才是基石。也就是你才是你自己的快乐源泉~</p><p><a href="https://book.douban.com/subject/3261600/" target="_blank" rel="noopener">豆瓣传送门</a></p><h3 id="细部说了什么？"><a href="#细部说了什么？" class="headerlink" title="细部说了什么？"></a>细部说了什么？</h3><ol><li>快乐的源泉在于自身，奠定了个人道德品行的重要性</li><li>个人所成有所局限，人们投身群体并获益于群体；名声是附属品，幸福应该源于本心</li><li>因为人的特殊性，感受痛苦会更深刻，但同时对快乐的感知也更加深刻；将生活想成赎罪，保持被动姿态，当不幸来临才不容易被打击</li><li>对于人的幸福起着首要关键作用的，是属于人的主体的美好素质，这些包括高贵的品格、良好的智力、愉快的性情和健康良好的体魄</li></ol><h3 id="它与我关系是什么？"><a href="#它与我关系是什么？" class="headerlink" title="它与我关系是什么？"></a>它与我关系是什么？</h3><p>&emsp;&emsp;关于如何寻找尽量称心、愉快地度过一生这的艺术，这本书给了我点启发。书中从理性出发，告诉你人生的本质是什么，从而得出人生的幸福来自何处。</p>]]></content>
      
      
      <categories>
          
          <category> 书影音 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 哲学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《你不知道的JavaScript》</title>
      <link href="2021/07/24/book/front-end/du-ni-bu-zhi-dao-de-javascript-shang-juan/"/>
      <url>2021/07/24/book/front-end/du-ni-bu-zhi-dao-de-javascript-shang-juan/</url>
      
        <content type="html"><![CDATA[<h2 id="这本书整体谈了什么？"><a href="#这本书整体谈了什么？" class="headerlink" title="这本书整体谈了什么？"></a>这本书整体谈了什么？</h2><p>深入 <code>JavaScript</code> 语言去弄清楚我们平常写的代码发生了什么。<br>每部分附读书笔记思维导图。<br><a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener">豆瓣传送门</a></p><h2 id="部分解读"><a href="#部分解读" class="headerlink" title="部分解读"></a>部分解读</h2><h3 id="一、作用域和闭包"><a href="#一、作用域和闭包" class="headerlink" title="一、作用域和闭包"></a>一、作用域和闭包</h3><p><img src="/static/xmind/books/You-Dont-Know-JS-20210704.png" alt="作用域和闭包"></p><h2 id="这本书写的有道理吗？"><a href="#这本书写的有道理吗？" class="headerlink" title="这本书写的有道理吗？"></a>这本书写的有道理吗？</h2><p>待填坑…</p><!-- 有一定的道理，给了一套系统的阅读技巧。但是作者的思想有点片面，阅读方式对文学作品也有一定的局限性。 --><h2 id="它与我关系是什么？"><a href="#它与我关系是什么？" class="headerlink" title="它与我关系是什么？"></a>它与我关系是什么？</h2><p>待填坑…</p><!-- 以前自己更多注重阅读感受，现在明白理性阅读也很重要。 --><!-- ![](/static/xmind/200502.png) -->]]></content>
      
      
      <categories>
          
          <category> 书影音 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年驾考记录</title>
      <link href="2021/07/11/life/record/2021-nian-jia-kao-ji-lu/"/>
      <url>2021/07/11/life/record/2021-nian-jia-kao-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="驾考记录"><a href="#驾考记录" class="headerlink" title="驾考记录"></a>驾考记录</h1><p>2021 年 5 月中旬在江西报的驾考，7 月上旬拿证，全部科目一次通过，以下为科目二和科目三的详细流程。</p><p>科二重点在于记点；科三重点在于细节。最好再加点自己的思考进去，不难。<br>仅供参考，当然以你教练所说的为标准，教练之间的教学方法有稍微差异。</p><p>坐标：江西省吉安县成达考场</p><h2 id="科二"><a href="#科二" class="headerlink" title="科二"></a>科二</h2><ol><li>调好座椅和后视镜<ol><li>座椅靠背垂直偏后一点</li></ol></li><li>系安全带</li><li>开始后，记得拉手刹</li></ol><h3 id="1-倒车入库"><a href="#1-倒车入库" class="headerlink" title="1. 倒车入库"></a>1. 倒车入库</h3><h4 id="1-0-准备"><a href="#1-0-准备" class="headerlink" title="1.0. 准备"></a>1.0. 准备</h4><p>直行，用 <code>车缝</code>  拉直 <code>水泥线</code><br>人快到 <code>白线</code> ，缓行；刚过 <code>白线</code>，停车</p><hr><p>准备左倒库：挂倒挡<br>身体坐直，看 <code>左视镜</code>  白线</p><h4 id="1-1-左倒库"><a href="#1-1-左倒库" class="headerlink" title="1.1. 左倒库"></a>1.1. 左倒库</h4><ol><li>白线后 30 公分（2 根白线的距离），向左打 2 圈<ol><li>看完柴再看过10公分</li></ol></li><li><strong>倾斜身体看左视镜</strong></li><li>快到 <code>第二根白色虚线</code> 中间，向右回 1 圈<ol><li>绿色瓶盖距离车尾 5 公分</li></ol></li><li><code>最后白线</code> 看到 30 公分（2根线距离），向右回 1 圈<ol><li>可以窄一点/提前点回，不能晚回</li></ol></li></ol><p><strong><code>出库前，看一下前轮距离，车歪则打平方向</code></strong></p><h4 id="1-2-右出库"><a href="#1-2-右出库" class="headerlink" title="1.2. 右出库"></a>1.2. 右出库</h4><ol><li>后轮压<code>水泥线</code> ，向右转 1又3/4（空的在左）</li><li>看左边窗户锁，过白线，停</li><li>准备右倒库：倒挡</li></ol><h4 id="1-3-右倒库"><a href="#1-3-右倒库" class="headerlink" title="1.3. 右倒库"></a>1.3. 右倒库</h4><ol><li>车轮跟白线角度（5 - 10公分？），向左回 3/4</li><li>最后白线看到 22 公分（1根半线），向左回 1 圈</li></ol><p><strong><code>出库前，看一下前轮距离，车歪则打平方向</code></strong></p><h4 id="1-4-左出库"><a href="#1-4-左出库" class="headerlink" title="1.4. 左出库"></a>1.4. 左出库</h4><ol><li>后轮压 <code>水泥线</code> ，向左打 2 圈方向盘</li><li>对着瓶子（过白线 22 公分，1根半线），向右回 1 圈</li><li>车缝对齐水泥线，向右回 1 圈</li></ol><h3 id="2-坡道定点停车与起步"><a href="#2-坡道定点停车与起步" class="headerlink" title="2. 坡道定点停车与起步"></a>2. 坡道定点停车与起步</h3><p>棱角拉直线</p><p>注意点：熄火后，必须 <code>挂空挡</code> 点火/开火<br>稳离合：离合一直压踩</p><h4 id="2-1-上坡"><a href="#2-1-上坡" class="headerlink" title="2.1. 上坡"></a>2.1. 上坡</h4><p>踩离合，上坡</p><ol><li>车前左边的棱，对着 <code>车轮印</code> （两线之间）走</li><li>定点：白色虚线左 5 公分（1/3白线）</li><li>定点后，<code>坐直 看左后视镜</code></li><li>看中间白（虚）线，缓行</li><li>看到 <code>白实线间的水泥线</code> ，停车：<strong><code>先脚刹，后离合</code></strong></li></ol><p><strong>停车：30s 内</strong></p><p>右后视镜看一下，与白线距离</p><ol><li>松手刹，拉手刹</li><li>稳离合，松开脚刹</li><li>上坡</li></ol><p><strong>起步：</strong></p><ol><li>向左 90 度，最高点往右回来</li><li>车前的<code>左棱线</code> ，对齐水泥线</li></ol><h4 id="2-2-下坡"><a href="#2-2-下坡" class="headerlink" title="2.2. 下坡"></a>2.2. 下坡</h4><ol><li>松离合，松脚刹，可以带一下脚刹</li><li>车前的<code>左棱线</code> ，对齐水泥线</li><li>下坡</li></ol><h3 id="3-直角转弯"><a href="#3-直角转弯" class="headerlink" title="3. 直角转弯"></a>3. 直角转弯</h3><p>左边车棱对直水泥线</p><ol><li>下坡完成，开启左转向灯</li><li>还有 1 米，关转向灯</li><li>左边车棱的左边线 压过白线，向左打 2 圈</li></ol><h3 id="4-侧方停车"><a href="#4-侧方停车" class="headerlink" title="4. 侧方停车"></a>4. 侧方停车</h3><p>进入侧方停车车道中间，左转 2 圈</p><h4 id="4-1-拉平车子"><a href="#4-1-拉平车子" class="headerlink" title="4.1. 拉平车子"></a>4.1. 拉平车子</h4><ol><li>向前，<code>正方形</code> 对着，露出 <code>三角形</code></li><li>看 <code>右后视镜</code> ，宽度，三根线，45公分左右。</li><li>挂倒挡</li></ol><h4 id="4-2-侧方停车"><a href="#4-2-侧方停车" class="headerlink" title="4.2. 侧方停车"></a>4.2. 侧方停车</h4><ol><li>后轮压水泥线，往右打 1 圈<ol><li>根据右后轮与白线的距离，提前或延后</li><li>宽了，提前打</li><li>窄了，延后打</li></ol></li><li>看左后视镜</li><li>过了第三块砖头缝，往左回 1 圈</li><li>左后轮压白线，向左打 2 圈</li><li>看前面车缝与白线</li><li>车缝挨着白线，停车：压离合，踩刹车</li><li>打左转向灯：往下压，挂一档</li></ol><h4 id="4-3-出来"><a href="#4-3-出来" class="headerlink" title="4.3. 出来"></a>4.3. 出来</h4><ol><li><code>左边小反光镜</code> 底座，刚压完白线</li><li>往右，回 2 圈</li><li>缓行</li><li>车头正中挨着线，向右打 1 圈<ol><li>磁铁地方</li></ol></li><li>回平，向左 1 圈</li></ol><h3 id="5-曲线行驶"><a href="#5-曲线行驶" class="headerlink" title="5. 曲线行驶"></a>5. 曲线行驶</h3><p>往前开，看 <code>右边</code>，人刚过 <code>白线</code> ，向左打 2 圈<br>直行，距白线 1.5 米，向右回 2 圈；向右打 2 圈</p><h4 id="5-1-开到弯道"><a href="#5-1-开到弯道" class="headerlink" title="5.1 开到弯道"></a>5.1 开到弯道</h4><ol><li>车对着路口，向右回 1 圈</li><li>车中间到了 路口中间靠右一点，向右回 1 圈</li></ol><h4 id="5-2-曲线行驶"><a href="#5-2-曲线行驶" class="headerlink" title="5.2 曲线行驶"></a>5.2 曲线行驶</h4><p><strong>1. 向左</strong></p><ol><li><code>左边棱角</code> 压线，向左打 1 圈</li><li><code>左边小镜子</code> 底座压线，向左打 半 圈</li><li><code>左边小镜子</code> 底座压着白线一直走<ol><li>此时方向盘状态：空的在下</li><li>底座在白线外（出去了)，往左打一点</li><li>底座在白线里（太里面)，往右打一点</li><li>压着白线即可回方向盘</li></ol></li><li>准备看左边小镜子左边边框</li></ol><p><strong>2. 往右回正</strong></p><p> <code>左边小镜子</code> 左耳朵边，挨着墙，向右回正一圈半</p><p><strong>3. 向右</strong></p><ol><li><code>车头正中间</code> 挨着线，向右打 1 圈<ol><li>磁铁地方</li></ol></li><li><code>右边棱角</code> 压线，向右打 半 圈方向<ol><li>此时方向盘状态：空的在下</li></ol></li><li><code>右边棱角</code> 一直压着线走</li></ol><p><strong>4. 往左回正</strong></p><ol><li>看右边后视镜宽度</li><li>出来了，向左回正</li></ol><h2 id="科三"><a href="#科三" class="headerlink" title="科三"></a>科三</h2><p>转向灯时间不够问题，解决方案：<br>默数：“一百零一、一百零二、一百零三”</p><h3 id="0-准备"><a href="#0-准备" class="headerlink" title="0. 准备"></a>0. 准备</h3><ol><li>上车三调整：<br> 座椅、靠背、后视镜</li><li>检查灯光复位</li><li>摇旗</li></ol><p><code>播报：请开始考试</code></p><p><strong>先下车检查：</strong></p><p>逆时针绕车一周：<br>车子 右后方 按 3 次按钮<br>车子 左前方 按 3 次按钮</p><p><strong>再上车准备：</strong></p><ol start="2"><li>关门</li><li>再次检查灯光<ol><li><strong>灯光旋钮</strong>在 关闭 位置</li><li><strong>左操作杆</strong>为 关闭 状态</li></ol></li><li>系安全带<ol><li>系好后拉一下</li></ol></li></ol><p>准备开启灯光考试</p><h3 id="1-灯光"><a href="#1-灯光" class="headerlink" title="1. 灯光"></a>1. 灯光</h3><p>旋钮中到右：关闭位置、示宽灯、近光灯</p><p><strong>口诀</strong></p><ul><li>有<strong>夜间通过</strong>的一律<strong>远近</strong><br>  超车：<strong>远近</strong></li><li>停车：示宽灯 + 危险灯</li><li>剩下全近光</li></ul><p><strong>模拟灯光操作</strong></p><ul><li>远光灯：往外推<ul><li>照明不良</li></ul></li><li>近光灯：不动<ul><li>前照灯</li><li>跟车行驶</li><li>照明良好</li><li>会车</li><li>夜间直行通过路口</li></ul></li><li>交替远近光灯：往里拨2下<ul><li><code>夜间通过</code> 急弯/坡路/拱桥/人行横道</li><li><code>夜间通过</code> 没有交通信号灯控制的路口</li><li>夜间 <code>超越</code> 其他车辆</li></ul></li><li>示宽灯 + 危险信号灯：<ul><li>交通事故</li><li>临时停车</li></ul></li></ul><h3 id="2-上路"><a href="#2-上路" class="headerlink" title="2. 上路"></a>2. 上路</h3><p><code>播报：请关闭所有灯光，请起步，继续完成考试</code></p><p><strong>打左转向灯</strong>：向下打</p><pre><code>左离中刹右油**左转向灯：下！右转向灯：上！**方向盘：左手控制为主</code></pre><h4 id="2-0-起步"><a href="#2-0-起步" class="headerlink" title="2.0 起步"></a>2.0 起步</h4><ol><li>一踩二挂三手刹<ul><li>踩离合，踩刹车<ul><li>踩刹车为了防止后溜</li></ul></li><li>挂一档：左上</li><li>松手刹</li></ul></li><li>观察 左后视镜，确认安全后起步<ol><li>左转向灯打 4s 后起步</li><li>向左打 15 度方向盘</li></ol></li><li>抬离合，3s 慢松刹车，4s 慢松离合<ol><li>左转向灯压着 左边线，回平方向</li><li>车头过虚线，关左转向灯：向上关</li></ol></li><li>拉平车身，驶入车道<ol><li>右脚对着路中间</li></ol></li></ol><h3 id="2-1-车道行驶"><a href="#2-1-车道行驶" class="headerlink" title="2.1 车道行驶"></a>2.1 车道行驶</h3><ol><li>缓进 3 挡<ol><li>进 2 挡：左下<ol><li>踩油门（右油），到10km/h</li><li>手法：扣 -&gt; 停 -&gt; 左 -&gt; 下</li></ol></li><li>进 3 挡：中上<ol><li>踩油门（右油），到20km/h</li><li>手法：上 -&gt; 停 -&gt; 上</li></ol></li></ol></li><li>稳油： 25 km/h</li><li>通过 <code>公交站台</code><ol><li>右边：快过完第二个牌子</li><li>点刹车</li><li>稳油： 25 km/h</li></ol></li><li>直线行驶<ol><li>匀力 上下抖动</li><li>身体在路中间偏左 10~15 公分</li></ol></li><li>直线行驶结束：准备掉头<ol><li><strong>打左转向灯</strong>，往下打</li></ol></li><li>拖刹到 15 km/h，退 2 档准备掉头<ol><li>在蓝色掉头牌子前</li><li>手法：扣（下）-&gt; 左 -&gt; 下</li><li>观察路口</li><li>等盖住停止线：观察左后视镜</li></ol></li><li>后轮过人行道，掉头<ol><li>瞄左后视镜</li><li>向左打 3/4（&lt;=3/4），空心在右</li><li>对着马路中间，慢慢回正</li></ol></li></ol><h3 id="2-2-掉头"><a href="#2-2-掉头" class="headerlink" title="2.2 掉头"></a>2.2 掉头</h3><ol><li><code>加减档位操作</code><ol><li>油门到 20 km/h：踩离合进 3 档</li><li>松离合</li><li>油门到 40 km/h：踩离合进 4 档</li><li>松离合</li><li>踩离合，进 3 挡</li><li>慢松离合</li></ol></li><li>公交站台<ol><li>点刹车</li><li>稳油： 25 km/h</li></ol></li><li>直行路口：进入实线<ol><li>点刹车</li><li>稳油： 25 km/h</li></ol></li><li>公交站台：后准备右转弯<ol><li>点刹车</li><li>稳油： 25 km/h</li></ol></li><li>岗亭前 10 米：打右转向灯<ol><li><strong>打右转向灯</strong>，往上打</li><li>转向灯 4s 后 15 度向右变道</li><li>转向灯一过虚线，回平方向</li><li>摆平车子</li></ol></li><li>转弯牌子前，快到绿色灯杆，退 2 挡<ol><li></li><li>拖刹到 15 km/h，退 2 档</li><li>注意：踩刹车要迅速</li><li>手法：扣 -&gt; 停 -&gt; 左 -&gt; 下</li></ol></li><li>挡风玻璃盖住箭头：点刹车</li><li>右车头压着蓝色杆，往右打 &lt;= 90度<ol><li>进了弯道，关右转向灯：往上打</li></ol></li><li>过弯道</li><li>快到路口<ol><li>向左回 15 度，此时方向盘微右15度</li><li></li></ol></li></ol><h3 id="2-3-右转弯"><a href="#2-3-右转弯" class="headerlink" title="2.3 右转弯"></a>2.3 右转弯</h3><ol><li>踩油门到 20 km/h，进三档<ol><li>注意稳油</li></ol></li><li>通过人行横道<ol><li>人行横道蓝色牌子前：点刹车</li><li>稳油： 25 km/h</li></ol></li><li><code>会车</code><ol><li>点刹车</li><li><strong>稳油： 25 ~ 30！！！</strong>，上坡会减速</li></ol></li><li><code>结束会车</code>：准备超车<ol><li><strong>打左转向灯</strong>：往下打 1 下；</li><li>准备向左超车</li></ol></li><li><code>请超越前方车辆</code>：向左打 15 度方向盘<ol><li>转向灯过虚线，回正方向</li><li>车头过完虚线：打右转向灯，往上打 2 下</li><li><ol start="2"><li><strong>打右转向灯</strong>：</li></ol></li><li>4s 后回原道（在路口前）</li></ol></li><li>回原道<ol><li>向右 15 度方向盘过去</li><li>回平了，准备掉头</li><li>关闭右转向灯：往下打 1 下</li></ol></li><li>准备掉头：<strong>打左转向灯</strong>，往下打 1 下<ol><li>在路口前</li></ol></li><li>拖刹到 15 km/h，退 2 档准备左掉头<ol><li>蓝色掉头牌子前</li><li>踩刹车要迅速</li><li>手法：扣 -&gt; 停 -&gt; 左 -&gt; 下</li></ol></li><li>过掉头牌子后，再过 2 课树<ol><li>往左掉头：打死方向缓慢回</li></ol></li></ol><h3 id="2-4-左掉头"><a href="#2-4-左掉头" class="headerlink" title="2.4 左掉头"></a>2.4 左掉头</h3><ol><li>摆平车子</li><li>加油到 20 km/h，进三档</li><li><code>前方请变更车道</code> <ol><li><strong>打左转向灯</strong>，向下打</li><li>4s 后向左打方向盘 15 度过左车道</li></ol></li><li>摆平车身<ol><li>转向灯一过虚线，方向回平</li><li>车头过来：关左转向灯</li><li>关左转向灯，向上打一下</li></ol></li><li>通过 <code>人行横道</code><ol><li>倒数第二根虚线前：点刹车</li><li>稳油： 25 km/h</li></ol></li><li>通过学校区域：准备左转<ol><li>蓝色牌子前：点刹车</li><li>稳油： 25 km/h</li><li><strong>打左转向灯</strong>，向下打，准备左转弯</li></ol></li><li>电子警察前：<ol><li>点刹！！！</li><li>挡风玻璃：盖住箭头，点刹</li></ol></li><li>准备路口停车<ol><li>拖刹 停车</li></ol></li></ol><h3 id="2-5-红绿灯路口"><a href="#2-5-红绿灯路口" class="headerlink" title="2.5 红绿灯路口"></a>2.5 红绿灯路口</h3><ol><li>停车：踩离合，慢踩刹车（中刹）<ol><li>挂一档！</li></ol></li><li>慢抬离合，慢松刹车（中刹），起步<ol><li>3s 慢松刹车，4s 慢松离合</li></ol></li><li>肩膀刚过路灯，向左打 90 度（&lt;=90）<ol><li>可不到90度</li></ol></li><li>斑马线中间：拉平车身<ol><li>微调</li><li>左转向灯对着线回平方向盘</li></ol></li><li>关左转向灯：向上打一下</li><li>加油到 10 km/h，进二档</li></ol><h3 id="2-6-靠边停车"><a href="#2-6-靠边停车" class="headerlink" title="2.6 靠边停车"></a>2.6 靠边停车</h3><ol><li><code>请靠边停车</code> <ol><li><strong>打右转向灯</strong>：向上打</li><li>4s 时看一下右后视镜</li></ol></li><li>4s 后 15 度向右靠边<ol><li>转向灯一过虚线，方向回平</li><li>雨刮器左边对着白线左边，往左打 15 度</li><li>贴着白线走</li></ol></li><li>停车：踩离合，慢踩刹车（中刹）<ol><li>挂一档！</li></ol></li><li>对点步骤 1：<ol><li>太宽了：向右 15 度</li><li>抬离合，抬刹车（中刹），缓行</li><li>用刹车控制速度</li><li>雨刮器在白线左边：停车</li><li>踩离合，慢踩刹车</li></ol></li><li>对点步骤 2：<ol><li>抬离合，抬刹车（中刹），缓行</li><li>雨刮器左边 不能出 白线右边</li></ol></li><li>停车：<ol><li>拉手刹：网上</li><li>挂空挡</li><li>熄火</li><li>解安全带</li><li>小幅度开门：右手按门把手后立即松开，左手开门</li><li>大幅度开门并关门</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 驾考 </tag>
            
            <tag> 科目二 </tag>
            
            <tag> 科目三 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="2021/06/06/front-end/relearn/bian-yi-yuan-li/"/>
      <url>2021/06/06/front-end/relearn/bian-yi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>为什么学</strong></p><ul><li>编译原理是前端框架的理论基石之一，了解编译原理能够对所接触的框架有更充分的认识</li><li>能对 Babel 等转译器进行深入掌握</li></ul><p><strong>能学到什么</strong></p><ul><li>编译原理入门</li><li>实现一个 Compiler</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、-编译基础"><a href="#一、-编译基础" class="headerlink" title="一、 编译基础"></a>一、 编译基础</h3><h4 id="1-本质"><a href="#1-本质" class="headerlink" title="1. 本质"></a>1. 本质</h4><p>编译的本质其实就是将一个东西转成另一个东西，套入编码层面，即将「来源代码」转成「目标语言」。</p><h4 id="2-流程"><a href="#2-流程" class="headerlink" title="2. 流程"></a>2. 流程</h4><p>编译器接收字符串，编译流程一般分为 4 步：首先进行 <code>词法分析</code> ，将字符串拆解成一个个 token 放入数组；然后对数组进行 <code>语法分析</code> ，遍历 token，合成 AST 树；接着到了 <code>转换阶段</code> ，将已有的 AST 树进行动态修改，生成一个新的 AST 树；最后根据新 AST 树 <code>生成代码</code> 。</p><h3 id="二、-实现一个-Compiler"><a href="#二、-实现一个-Compiler" class="headerlink" title="二、 实现一个 Compiler"></a>二、 实现一个 Compiler</h3><p>待更新…</p><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><p><img src="/static/xmind/front_end/relearn/compiler.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Vue </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue原理之响应式设计</title>
      <link href="2021/05/31/front-end/relearn/vue-yuan-li-zhi-xiang-ying-shi-she-ji/"/>
      <url>2021/05/31/front-end/relearn/vue-yuan-li-zhi-xiang-ying-shi-she-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>为什么学</strong></p><ul><li>响应式是 Vue 最独特的特性之一</li></ul><p><strong>能学到什么</strong></p><ul><li>深入响应式原理</li><li>手撸 Vue 响应式原理</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、-原理总结"><a href="#一、-原理总结" class="headerlink" title="一、 原理总结"></a>一、 原理总结</h3><p>我们都知道，只要在 Vue 实例中声明过的数据，那么这个数据就是响应式的。也就是当你修改数据时，视图会进行更新。这是我们说的响应式。</p><p><code>Vue2.x</code> 通过 <code>Object.defineProperty()</code> 做数据劫持，而 <code>Vue3</code> 通过 <code>Proxy</code> 做数据代理，从而捕捉到对数据的 <code>get</code> 和 <code>set</code> 。</p><p>本质的思想都是在 <code>getter</code> 时候收集副作用，在 <code>setter</code> 时候触发副作用执行。</p><h3 id="二、-Vue2-响应式实现"><a href="#二、-Vue2-响应式实现" class="headerlink" title="二、 Vue2 响应式实现"></a>二、 Vue2 响应式实现</h3><!-- #### 1. 整体结构申明整体核心类及方法，确认整体框架结构：* index.html 主页面* vue.js Vue主文件* compiler.js 编译模版，解析指令（v-model等）* dep.js 收集依赖关系，存储观察者，以发布订阅模式实现* observer.js 实现数据劫持* watcher.js 观察者对象类 --><p><img src="/static/front-end/relearn/reactive-vue2.png" alt="Vue2响应式原理"></p><p>待更新…</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Vue </tag>
            
            <tag> 响应式设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue原理之diff算法</title>
      <link href="2021/05/30/front-end/relearn/vue-yuan-li-zhi-diff-suan-fa/"/>
      <url>2021/05/30/front-end/relearn/vue-yuan-li-zhi-diff-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>为什么学</strong></p><ul><li>高级前端工具，大多离不开算法</li></ul><p><strong>能学到什么</strong></p><ul><li>深入理解 diff 算法</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、-前置知识"><a href="#一、-前置知识" class="headerlink" title="一、 前置知识"></a>一、 前置知识</h3><h4 id="1-diff-算法简介"><a href="#1-diff-算法简介" class="headerlink" title="1. diff 算法简介"></a>1. diff 算法简介</h4><ul><li>上古时期：O(m^3n^3)</li><li>2011 年：O(n^3)，n为节点总数</li><li>React 提出近代同层比较算法：O(n)</li></ul><p><strong>举个栗子理解下时间复杂度，遍历一个长度为 n 的列表：</strong></p><ul><li>最好时间复杂度：1（第一个就找到）</li><li>最坏时间复杂度：n（最后一个元素找到）</li><li>平均时间复杂度：总操作数 / 总情况数 = 1 + 2 + 3 … + n / (n + 1(not found)) = n</li><li>均摊时间复杂度：最坏时间复杂度均摊 = n / n = 1</li></ul><h4 id="2-为什么需要-diff"><a href="#2-为什么需要-diff" class="headerlink" title="2. 为什么需要 diff"></a>2. 为什么需要 diff</h4><ul><li>本质上为了性能</li><li>数据与视图隔离解耦：f(state) -&gt; View</li></ul><h4 id="3-Why-O-n-3"><a href="#3-Why-O-n-3" class="headerlink" title="3. Why O(n^3)"></a>3. Why O(n^3)</h4><p>传统算法是跨层级比较，即计算机中跨层级比较两棵树。</p><ul><li>树的最短编辑距离算法复杂度是 O(n^2)<ul><li>经典解决方法：Levenshtein（莱文斯坦）算法，复杂度o(n^2)</li></ul></li><li>diff 再做一次 patch，找到差异后还要计算最小转换方式，再遍历一次</li><li>累计 O(n^3)</li></ul><h4 id="4-Why-O-n"><a href="#4-Why-O-n" class="headerlink" title="4. Why O(n)"></a>4. Why O(n)</h4><p>React/Vue 的 diff 复杂度其实不是严格意义上的 O(n)。<br>复杂度其实是 O(nm)，只是有一些技巧可以优化成 O(n)。</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">/* *   a       a *  | |     | | *  c b     c d * 只做同层比较： * [a, a] 相同，不处理 * [c, c] 相同，不处理 * [b, d] 不相同，替换 */</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">]</span><span class="token comment" spellcheck="true">/* 比较过程 * [a, b] * [b, d] * [c, e] * [null, f] */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> oldNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> newNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果没有这一层，假设 type 全不相同，那么就是 O(n)，最坏复杂度 O(nm)</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> oldNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当然，这只是 React 的实现，肯定还是有更优秀的 diff 算法的，比如 inferno 的，能到 O(mlogn)，vue3 也是借鉴了这一算法</p><h4 id="4-How-O-n"><a href="#4-How-O-n" class="headerlink" title="4. How O(n)"></a>4. How O(n)</h4><p>React 是怎么设计将复杂度砍下来呢？</p><p>其实就是在算法复杂度、虚拟 DOM 渲染机制、性能中找了一个平衡，react 采用了启发式的算法，做了如下最优假设：</p><ul><li>如果节点类型相同，那么以该节点为根节点的 tree 结构，大概率是相同的，所以如果类型不同，可以直接「删除」原节点，「插入」新节点</li><li>跨层级移动子 tree 结构的情况比较少见，或者可以培养用户使用习惯来规避这种情况，遇到这种情况同样是采用先「删除」再「插入」的方式，这样就避免了跨层级移动</li><li>同一层级的子元素，可以通过 key 来缓存实例，然后根据算法采取「插入」「删除」「移动」的操作，尽量复用，减少性能开销</li><li>完全相同的节点，其虚拟 DOM 也是完全一致的</li></ul><h4 id="5-聊一聊-key"><a href="#5-聊一聊-key" class="headerlink" title="5. 聊一聊 key"></a>5. 聊一聊 key</h4><p>首先，为啥要有 key，这种官方文档就有说明：<a href="https://cn.vuejs.org/v2/api/#key" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#key</a></p><ul><li><code>key</code> 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes</li><li>如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li></ul><p><strong>举个栗子：</strong></p><p>假设原来有 [1, 2, 3] 三个子节点渲染了，假设我们这么操作了一波，将顺序打乱变成 [3, 1, 2]，并且删除了最后一个，变成 [3, 1]。</p><p>最优的 diff 思路应该是复用 3, 1 组件，移动一下位置，去掉 2 组件，这样整体是开销最小的，如果有 key 的话，这波操作水到渠成，如果没有 key 的话，那么就要多一些操作了:</p><ul><li>判断哪些可以复用，有 key 只需要从映射中康康 3, 1在不在，没有 key 的话，可能就执行替换了，肯定比「复用」「移动」开销大了</li><li>删除了哪一个？新增了哪一个？有 key 的话是不是很好判断嘛，之前的映射没有的 key，比如变成 [3, 1, 4] 那这个 4 很容易判断出应该是新建的，删除也同理</li><li>但是没有 key 的话就麻烦一些了</li></ul><p><strong>key 的操作误区</strong></p><ul><li>使用随机数，会导致每次 key 都不一样，那复用毛线，都是新建了</li><li>使用数组下标，<code>splice</code> 操作中 Vue 行为不正常，React 性能不正常</li></ul><h3 id="二、-虚拟-DOM"><a href="#二、-虚拟-DOM" class="headerlink" title="二、 虚拟 DOM"></a>二、 虚拟 DOM</h3><h4 id="1-什么是虚拟-DOM"><a href="#1-什么是虚拟-DOM" class="headerlink" title="1. 什么是虚拟 DOM"></a>1. 什么是虚拟 DOM</h4><p>虚拟 DOM 为嵌套结构的对象树，与 DOM 结构类似。一般记录它的节点类型、属性，还有子节点，结构如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  el<span class="token punctuation">:</span> xxxx<span class="token punctuation">}</span></code></pre><h4 id="2-怎么创建虚拟-DOM"><a href="#2-怎么创建虚拟-DOM" class="headerlink" title="2. 怎么创建虚拟 DOM"></a>2. 怎么创建虚拟 DOM</h4><p>定义一个方法（h、createElement）创建一个虚拟节点, 返回一个对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="3-如何使用虚拟-DOM"><a href="#3-如何使用虚拟-DOM" class="headerlink" title="3. 如何使用虚拟 DOM"></a>3. 如何使用虚拟 DOM</h4><p>编译通过一些工具转成函数调用嵌套的方式，最终生成对象 tree。例如：JSX 可用 Babel 转一下 createElement 形式：</p><pre class=" language-js"><code class="language-js">JSX<span class="token punctuation">:</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">'padding-20'</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">'li-01'</span><span class="token operator">></span><span class="token keyword">this</span> is li <span class="token number">01</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 经过一些工具转一下：</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">'padding-20'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'li-01'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'this is li 01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-虚拟-DOM-的渲染-mount-render"><a href="#4-虚拟-DOM-的渲染-mount-render" class="headerlink" title="4. 虚拟 DOM 的渲染(mount/render)"></a>4. 虚拟 DOM 的渲染(mount/render)</h4><p>通过原生 DOM 的方法 createElement、insert、insertbefore 等 DOM 方法进行操作：</p><pre class=" language-js"><code class="language-js"><span class="token function">f</span><span class="token punctuation">(</span>vode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token punctuation">.</span>  parent<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span> insertBefore<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'app'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h4 id="4-diff-相关了-patch"><a href="#4-diff-相关了-patch" class="headerlink" title="4. diff 相关了(patch)"></a>4. diff 相关了(patch)</h4><p>改了数据后的 tree 与原 tree 做对比，找到最小差异部分 DOM 并更新：</p><pre class=" language-js"><code class="language-js"><span class="token function">f</span><span class="token punctuation">(</span>oldVnodeTree<span class="token punctuation">,</span> newVnodeTree<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 调度<span class="token operator">?</span> <span class="token operator">-</span><span class="token operator">></span> view</code></pre><h3 id="三、Vue3-diff-核心思想"><a href="#三、Vue3-diff-核心思想" class="headerlink" title="三、Vue3 diff 核心思想"></a>三、Vue3 diff 核心思想</h3><ol><li>定义前后两个指针，先裁剪，缩小计算空间</li><li>双指针找出中间差量部分，进行增加/删除</li><li>移动部分：将最大长度不需要动的部分找出来，把只需要动的部分 insert 下<ul><li>利用最长上升子序列算法，选一个长度最长的依次上升的，保持不动，那他移动的步数一定是最少的</li></ul></li></ol><blockquote><p>参考资料：</p><ul><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener">浏览器工作原理揭秘</a></li><li><a href="https://www.bilibili.com/video/av35265997/" target="_blank" rel="noopener">像素的一生</a></li><li><a href="https://en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="noopener">Levenshtein</a></li><li><a href="https://github.com/infernojs/inferno" target="_blank" rel="noopener">inferno</a></li><li><a href="https://www.zhihu.com/topic/19864220/hot" target="_blank" rel="noopener">启发式算法</a></li><li><a href="https://en.wikipedia.org/wiki/Longest_increasing_subsequence" target="_blank" rel="noopener">最长上升子序列算法</a></li></ul></blockquote><p><img src="/static/xmind/front_end/relearn/vue-diff.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Vue </tag>
            
            <tag> diff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js之状态管理</title>
      <link href="2021/05/16/front-end/relearn/vue.js-zhi-zhuang-tai-guan-li/"/>
      <url>2021/05/16/front-end/relearn/vue.js-zhi-zhuang-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>为什么学</strong></p><ul><li>状态管理是前端核心部分</li></ul><p><strong>能学到什么</strong></p><ul><li>熟悉状态管理的思想</li><li>Vuex 核心原理与使用</li><li>手写实现简单的 Vue 状态管理</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、状态管理"><a href="#一、状态管理" class="headerlink" title="一、状态管理"></a>一、状态管理</h3><h4 id="1-状态是什么"><a href="#1-状态是什么" class="headerlink" title="1. 状态是什么"></a>1. 状态是什么</h4><p>最广义程度来看，<code>状态</code> 本质是还是一种可以描述视图状态、行为的数据结构。</p><p>往细了看，状态大致可以分为两类，<strong>本地状态</strong>和<strong>共享状态</strong>。</p><p>本地状态就是 <code>vue</code> 中的 <code>data</code>，<code>react</code>中的 <code>state</code>，这里我们一般会用来控制弹窗的现实隐藏、<code>loading</code>效果等。</p><p>共享状态是项目中可以共享的数据。</p><h4 id="2-状态管理是什么"><a href="#2-状态管理是什么" class="headerlink" title="2. 状态管理是什么"></a>2. 状态管理是什么</h4><p><code>状态的管理</code> 则是通过一定的算法将这些 <code>状态</code> 组织、管理起来，又回到了 <code>程序=算法+数据结构</code> 这一基本概念。</p><p>状态管理分为中心化和去中心化两种模式。</p><h4 id="3-理想状态管理工具"><a href="#3-理想状态管理工具" class="headerlink" title="3. 理想状态管理工具"></a>3. 理想状态管理工具</h4><ol><li>状态更新的设计，<code>API</code> 足够少，且简单</li><li>如何共享状态</li><li>状态提升</li><li>状态下降</li><li>同步、异步的处理</li><li>持久状态和临时状态如何区分维护</li><li>状态更新的事务如何管理</li><li>去中心化</li><li>…</li></ol><h3 id="二、Vuex-介绍"><a href="#二、Vuex-介绍" class="headerlink" title="二、Vuex 介绍"></a>二、Vuex 介绍</h3><p>在 Vue 项⽬中，每个组件的数据都有其独⽴的作⽤域。当组件间需要跨层级或者同层之间频繁传递的时候，数据交互就会⾮常繁琐。Vuex 的主要作⽤就是集中管理所有组件的数据和状态以及规范数据修改的⽅式。</p><h4 id="1-核心原理"><a href="#1-核心原理" class="headerlink" title="1. 核心原理"></a>1. 核心原理</h4><p>Flux 架构主要思想是<strong>应用的状态被集中存放到一个仓库中，但是仓库中的状态不能被直接修改，必须通过特定的方式</strong>才能更新状态。</p><p>Vuex 基于 flux 思想为 Vue 框架定制，区分同步和异步，定义两种行为，Actions 用来处理异步状态变更（内部还是调用 Mutations），Mutations 处理同步的状态变更，整个链路应该是一个闭环，单向的，完美契合 FLUX 的思想。</p><p>「页面 dispatch/commit」-&gt; 「actions/mutations」-&gt; 「状态变更」-&gt; 「页面更新」-&gt; 「页面 dispatch/commit」…</p><p><img src="/static/front-end/relearn/vuex.png" alt="vuex"></p><h4 id="2-Vuex-五大核心"><a href="#2-Vuex-五大核心" class="headerlink" title="2. Vuex 五大核心"></a>2. Vuex 五大核心</h4><ul><li><code>State</code>：单一状态树<ul><li>用一个对象就包含了全部的应用层级状态。</li><li>至此它便作为一个“唯一数据源 (SSOT (opens new window))”而存在。</li></ul></li><li><code>Getter</code>：<code>state</code> 的计算属性<ul><li>从 <code>store</code> 中的 <code>state</code> 中派生出一些状态。</li><li>场景：当需要重复对某个数据进⾏某种操作的时候可以封装在 <code>getter</code> ⾥⾯，当 <code>state</code> 中的数据改变了以后对应的 <code>getter</code> 也会相应的改变</li></ul></li><li><code>Mutation</code>：更改 <code>Vuex</code> 的 <code>store</code> 中的状态的唯一方法<ul><li>必须是同步函数</li><li>每个 <code>mutation</code> 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)</li><li>回调函数就是我们实际进行状态更改的地方，并且它会接受 <code>state</code> 作为第一个参数，第二个参数为载荷（<code>payload</code>）对象</li></ul></li><li><code>Action</code>：类似于 <code>Mutation</code><ul><li>Action 提交的是 <code>mutation</code>，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li><li>Action 函数接受一个 <code>context</code> 参数，它与 <code>store</code> 实例有着相同的方法和属性，可以使用 <code>context.commit</code> 来提交一个 <code>mutation</code>，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code></li></ul></li><li><code>Module</code>：模块化分隔，防⽌ <code>state</code> 过于庞⼤和冗余<ul><li>模块内部的 <code>state</code> 是局部的，只属于模块本身所有，所以外部必须通过对应的模块名进行访问</li><li>模块内部的 <code>action</code>、<code>mutation</code> 和 <code>getter</code> 默认可是注册在全局命名空间的，通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 <code>getter</code>、<code>action</code> 及 <code>mutation</code> 都会自动根据模块注册的路径调整命名。</li></ul></li></ul><!-- #### 3. 辅助函数* mapStates* mapGetters* mapMutaions* mapActions --><h3 id="三、Vuex-原理"><a href="#三、Vuex-原理" class="headerlink" title="三、Vuex 原理"></a>三、Vuex 原理</h3><h4 id="1-设计思路"><a href="#1-设计思路" class="headerlink" title="1. 设计思路"></a>1. 设计思路</h4><p><strong>1.1. FLUX 思想</strong></p><ul><li>问题：在开发中面临最多的场景是状态重复但是不集中，在不同的组件中依赖了同样的状态，重复就会导致不对等的风险。</li><li>思想：基于 <code>FLUX</code> 的思想，我们设计的状态管理将是 <code>中心化</code> 的工具，也就是集中式存储管理应用的所有组件的状态，将所有的状态放在一个全局的 Tree 结构中，集中放在一起的好处是可以有效避免重复的问题，也更好的管理，将状态和视图层解耦。</li><li>解决：使用全局的 store 对象管理状态和数据，单一状态树</li></ul><p><strong>1.2. 状态流转</strong></p><ul><li>单一流转</li><li>同步和异步分层：<code>Mutations</code> 负责同步状态管理、<code>Actions</code> 负责异步事件（内部通过mutations改变状态）。</li></ul><p><strong>1.3. 与 Vue 集成</strong></p><ul><li>通过插件将 Vue 集成在一起</li><li>通过 mixin 将 $store 这样的快速访问 store 的快捷属性注入到每一个 Vue 实例中</li></ul><p><strong>1.4. 响应式</strong></p><ul><li>利用 Vue 的 data 是响应式实现</li></ul><p><strong>1.5. 扩展</strong></p><ul><li>辅助函数</li><li>模块化</li><li>插件支持</li></ul><h4 id="2-简单实现"><a href="#2-简单实现" class="headerlink" title="2. 简单实现"></a>2. 简单实现</h4><p><strong>2.1. store 注册</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> Vue<span class="token comment" spellcheck="true">// vue 插件必须要这个 install 函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 拿到 Vue 的构造器，存起来</span>  Vue <span class="token operator">=</span> _Vue  <span class="token comment" spellcheck="true">// 通过 mixin 注入到每一个vue实例</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> beforeCreate<span class="token punctuation">:</span> vuexInit <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> vuexInit <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options    <span class="token comment" spellcheck="true">// 这样就可以通过 this.$store 访问到 Vuex 实例，拿到 store 了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>store <span class="token operator">===</span> <span class="token string">'function'</span>        <span class="token operator">?</span> options<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> options<span class="token punctuation">.</span>store    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2.2. 实现响应式</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">resetStoreVM</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>state<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> state <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">resetStoreVM</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 因为 vue 实例的 data 是响应式的，正好利用这一点，就可以实现 state 的响应式</span>  store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      $$state<span class="token punctuation">:</span> state    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>2.3. 衍生数据（getters）</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> options<span class="token punctuation">.</span>state    <span class="token function">resetStoreVM</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 我们用 getters 来收集衍生数据 computed</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 简单处理一下，衍生不就是计算一下嘛，传入 state</span>    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getters<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> getterFn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getters<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getterFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> state <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">resetStoreVM</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      $$state<span class="token punctuation">:</span> state    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>2.4. Actions/Mutations</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> options<span class="token punctuation">.</span>state    <span class="token function">resetStoreVM</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> getterFn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getters<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getterFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义的行为，分别对应异步和同步行为处理</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> mutation<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> payload <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 最终执行的就是 this._vm_data.$$state.xxx = xxx 这种操作</span>        <span class="token function">mutation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>actions<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> payload <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// action 专注于处理异步，这里传入 this，这样就可以在异步里面通过 commit 触发 mutation 同步数据变化了</span>        <span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 触发 mutation 的方式固定是 commit</span>  <span class="token function">commit</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 触发 action 的方式固定是 dispatch</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> state <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">resetStoreVM</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      $$state<span class="token punctuation">:</span> state    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>2.5. 分形，拆分出多个 Module</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// module 可以对状态模型进行分层，每个 module 又含有自己的 state、getters、actions 等</span><span class="token comment" spellcheck="true">// 定义一个 module 基类</span><span class="token keyword">class</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> rawModule <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule <span class="token operator">=</span> rawModule    <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  getChild <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>   addChild <span class="token punctuation">(</span>key<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> module  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// module-collection.js 把 module 收集起来</span><span class="token keyword">class</span> <span class="token class-name">ModuleCollection</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rawModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果是根模块 将这个模块挂在到根实例上</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newModule    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>      parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newModule<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果有 modules，开始递归注册一波</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>      _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> rawChildModule<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> rawChildModule<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// store.js 中</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 其余代码...</span>    <span class="token comment" spellcheck="true">// 所有的 modules 注册进来</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 但是这些 modules 中的 actions, mutations, getters 都没有注册，所以我们原来的方法要重新写一下</span>    <span class="token comment" spellcheck="true">// 递归的去注册一下就行了，这里抽离一个方法出来实现</span>    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">,</span> path<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// getters</span>  <span class="token keyword">const</span> getters <span class="token operator">=</span> root<span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters  <span class="token keyword">if</span> <span class="token punctuation">(</span>getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>getters<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> getterFn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getterFn</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>state<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// mutations</span>  <span class="token keyword">const</span> mutations <span class="token operator">=</span> root<span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations  <span class="token keyword">if</span> <span class="token punctuation">(</span>mutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>mutations<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> mutation<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> _mutations <span class="token operator">=</span> store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      _mutations<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>payload <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">mutation</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> _mutations    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// actions</span>  <span class="token keyword">const</span> actions <span class="token operator">=</span> root<span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions  <span class="token keyword">if</span> <span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> _actions <span class="token operator">=</span> store<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      _actions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>payload <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">action</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      store<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> _actions    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 递归</span>  _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>_children<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> childModule<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> childModule<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>2.6. 插件机制</strong></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>plugin <span class="token operator">=</span><span class="token operator">></span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>参考资料</p><ul><li><a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vuex 官方资料</a></li><li><a href="https://github.com/vuejs/vuex/tree/dev/src" target="_blank" rel="noopener">Vuex 源代码地址</a></li><li><a href="https://github.com/weipxiu/Vue-vuex" target="_blank" rel="noopener">vue-vuex 最佳实践</a></li><li><a href="https://bigdata.bihell.com/language/javascript/vue/vuex.html#%E4%B8%80%E3%80%81vuex%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E9%AC%BC" target="_blank" rel="noopener">vuex 最佳实践</a></li><li><a href="https://juejin.cn/post/6844904001192853511#heading-12" target="_blank" rel="noopener">学习 vuex 源码整体架构，打造属于自己的状态管理库</a></li><li><a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">开发 Vue 插件</a></li></ul></blockquote><p><img src="/static/xmind/front_end/relearn/vuex.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由 &amp; 异步组件</title>
      <link href="2021/05/10/front-end/relearn/lu-you-yi-bu-zu-jian/"/>
      <url>2021/05/10/front-end/relearn/lu-you-yi-bu-zu-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>为什么学</strong></p><ul><li>了解路由发展，深入前端路由原理</li></ul><p><strong>能学到什么</strong></p><ul><li>手写实现路由</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、-前端路由"><a href="#一、-前端路由" class="headerlink" title="一、 前端路由"></a>一、 前端路由</h3><h4 id="1-历史背景"><a href="#1-历史背景" class="headerlink" title="1. 历史背景"></a>1. 历史背景</h4><p><strong>1.1. 前后端开发未分离</strong></p><p>服务端访问/控制路由。前端/客户端发送 http 请求，服务端根据 url 路径的不同，返回不同的 html/数据。</p><p>优点：</p><ul><li>SEO 效果好</li><li>⾸屏时间耗时短</li></ul><p>缺点：</p><ul><li>服务器压⼒⼤</li><li>前端代码和服务端代码融合在⼀起不好维护</li><li>协作流程不清晰</li></ul><p><strong>1.2. 单页面应用（SPA）</strong></p><p>路由由前端控制，访问不同链接时，返回单一的 html 页面，即单页应用（SPA，单页即指单一html文件），特点如下：</p><ul><li>⻚⾯中的交互是不刷新⻚⾯，⻚⾯跳转也不刷新⻚⾯</li><li>加载过的公共资源，无需重复加载</li></ul><h4 id="2-原理及实现"><a href="#2-原理及实现" class="headerlink" title="2. 原理及实现"></a>2. 原理及实现</h4><p>待更新…</p><h3 id="二、-Vue-Router"><a href="#二、-Vue-Router" class="headerlink" title="二、 Vue Router"></a>二、 Vue Router</h3><p>待更新…</p><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><p>待更新…</p><blockquote><p>参考资料：</p><ul><li><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">Vue Router官方文档</a></li></ul></blockquote><p><img src="/static/xmind/front_end/relearn/compiler.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指针 &amp; 闭包 &amp; 作用域</title>
      <link href="2021/05/03/front-end/relearn/this-bi-bao-zuo-yong-yu/"/>
      <url>2021/05/03/front-end/relearn/this-bi-bao-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>深入理解 <code>this</code></li><li>理解作用域</li><li>理解闭包</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><p><img src="/static/xmind/front_end/relearn/this.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESNext规范</title>
      <link href="2021/04/25/front-end/relearn/esnext-gui-fan-xiang-jie/"/>
      <url>2021/04/25/front-end/relearn/esnext-gui-fan-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>了解 ECMAScript 规范发展</li><li>熟悉 ES6 及以后新增的常用 API</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、-ECMAScript-规范发展"><a href="#一、-ECMAScript-规范发展" class="headerlink" title="一、 ECMAScript 规范发展"></a>一、 ECMAScript 规范发展</h3><p>可以版本号描述，比如ES6、ES7。也可以年份来描述，比如ES2015、ES2016。</p><ul><li><p>ES6：指 2015 年 6 月发布的 ES2015 标准, 但是很多人在谈及 ES6 的时候, 都会把 ES2016、ES2017 等标准的内容也带进去。</p></li><li><p>ESNext：泛指, 它永远指向下一个版本，如当前最新版本是 ES2020, 那么 ESNext 指的就是 2021 年 6 月将要发布的标准。</p></li></ul><h3 id="二、-ES6-及以后新增的常用-API"><a href="#二、-ES6-及以后新增的常用-API" class="headerlink" title="二、 ES6 及以后新增的常用 API"></a>二、 ES6 及以后新增的常用 API</h3><h4 id="1-let-和-const"><a href="#1-let-和-const" class="headerlink" title="1. let 和 const"></a>1. let 和 const</h4><ul><li>引入了块级作用域的概念</li><li>暂时性死区：不允许变量提升</li></ul><p>let 块级作用域经典题:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 4~4</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0~3</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 0~3，let为块级作用域</span></code></pre><p>let 不允许变量提升体现:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>letI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: letI is not defined</span><span class="token keyword">let</span> letI <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><h4 id="2-箭头函数"><a href="#2-箭头函数" class="headerlink" title="2. 箭头函数"></a>2. 箭头函数</h4><ul><li><strong>箭头函数不会创建自己的 this</strong><br>  它从自己的作用域链的上一层继承 this <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数资料 - MDN</a></li><li>箭头函数不能用作构造函数<br>  构造函数会改变 this 指向到新实例出来的对象，而箭头函数的 this 在定义时已经决定了</li></ul><p>this 区别的体现的简单栗子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token string">'OBJ'</span><span class="token punctuation">,</span>  a<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OBJ</span>obj<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined，箭头函数定义时所处的外层执行环境的this，为 window</span></code></pre><p>这里要注意，定义对象的大括号 {} 是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中！！</p><h4 id="3-Class"><a href="#3-Class" class="headerlink" title="3. Class"></a>3. Class</h4><ul><li>constructor：构造函数</li><li>可以使用 set 和 get 函数</li><li>static 为全局函数</li><li>直接使用变量即为类变量，无需声明</li></ul><h4 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4. 模板字符串"></a>4. 模板字符串</h4><p>支持变量和对象解析和换行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">'ann'</span><span class="token keyword">const</span> a  <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - xxxx`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token template-string"><span class="token string">`我是换行我换行了！我又换行了！`</span></span><span class="token punctuation">;</span></code></pre><p>编写 render 函数：实现 template render 功能。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 条件</span><span class="token keyword">const</span> year <span class="token operator">=</span> <span class="token string">'2021'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> month <span class="token operator">=</span> <span class="token string">'10'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> day <span class="token operator">=</span> <span class="token string">'01'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> template <span class="token operator">=</span> <span class="token string">'${year}-${month}-${day}'</span><span class="token punctuation">;</span><span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token punctuation">{</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { year: 2021, month: 10, day: 01 }</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2021-10-01</span><span class="token comment" spellcheck="true">// 高阶函数实现：模板字符串功能</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\$\{(.*?)\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">replace资料 - MDN</a></p><h4 id="5-解构"><a href="#5-解构" class="headerlink" title="5. 解构"></a>5. 解构</h4><h5 id="5-1-数组的解构"><a href="#5-1-数组的解构" class="headerlink" title="5.1. 数组的解构"></a>5.1. 数组的解构</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 基础类型解构</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1, 2, 3</span><span class="token comment" spellcheck="true">// 对象数组解构</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: '1'}, {name: '2'}, {name: '3'}</span><span class="token comment" spellcheck="true">// ...解构</span><span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1, [2, 3, 4]</span><span class="token comment" spellcheck="true">// 嵌套解构</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1, 2, 4</span><span class="token comment" spellcheck="true">// 解构不成功为undefined</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1, undefined, undefined</span><span class="token comment" spellcheck="true">// 解构默认赋值</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3, 2</span></code></pre><h5 id="5-2-对象的结构"><a href="#5-2-对象的结构" class="headerlink" title="5.2. 对象的结构"></a>5.2. 对象的结构</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对象属性解构</span><span class="token keyword">let</span> <span class="token punctuation">{</span> f1<span class="token punctuation">,</span> f2 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> f1<span class="token punctuation">:</span> <span class="token string">'test1'</span><span class="token punctuation">,</span> f2<span class="token punctuation">:</span> <span class="token string">'test2'</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// test1, test2</span><span class="token comment" spellcheck="true">// 可以不按照顺序，这是数组解构和对象解构的区别之一</span><span class="token keyword">let</span> <span class="token punctuation">{</span> f2<span class="token punctuation">,</span> f1 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> f1<span class="token punctuation">:</span> <span class="token string">'test1'</span><span class="token punctuation">,</span> f2<span class="token punctuation">:</span> <span class="token string">'test2'</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// test1, test2</span><span class="token comment" spellcheck="true">// 解构对象重命名</span><span class="token keyword">let</span> <span class="token punctuation">{</span> f1<span class="token punctuation">:</span> rename<span class="token punctuation">,</span> f2 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> f1<span class="token punctuation">:</span> <span class="token string">'test1'</span><span class="token punctuation">,</span> f2<span class="token punctuation">:</span> <span class="token string">'test2'</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rename<span class="token punctuation">,</span> f2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// test1, test2</span><span class="token comment" spellcheck="true">// 嵌套解构</span><span class="token keyword">let</span> <span class="token punctuation">{</span> f1<span class="token punctuation">:</span> <span class="token punctuation">{</span>f11<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> f1<span class="token punctuation">:</span> <span class="token punctuation">{</span> f11<span class="token punctuation">:</span> <span class="token string">'test11'</span><span class="token punctuation">,</span> f12<span class="token punctuation">:</span> <span class="token string">'test12'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f11<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// test11</span><span class="token comment" spellcheck="true">// 默认值</span><span class="token keyword">let</span> <span class="token punctuation">{</span> f1 <span class="token operator">=</span> <span class="token string">'test1'</span><span class="token punctuation">,</span> f2<span class="token punctuation">:</span> rename <span class="token operator">=</span> <span class="token string">'test2'</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> f1<span class="token punctuation">:</span> <span class="token string">'current1'</span><span class="token punctuation">,</span> f2<span class="token punctuation">:</span> <span class="token string">'current2'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> rename<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// current1, current2</span></code></pre><h5 id="5-3-解构原理"><a href="#5-3-解构原理" class="headerlink" title="5.3. 解构原理"></a>5.3. 解构原理</h5><p>针对可迭代对象的 Iterator 接口，通过遍历器按顺序获取对应的值进行赋值。</p><p><strong>5.3.1 Iterator 是什么？</strong></p><p>一种接口/interface，为各种不一样的数据解构提供统一的访问机制。任何数据解构只要有 Iterator 接口，就能通过遍历操作，依次按顺序处理数据结构内所有成员。</p><p>使用for of的语法遍历数据结构时，自动寻找Iterator接口。</p><p><strong>5.3.2 Iterator 有什么用？</strong></p><ul><li>为各种数据解构提供统一的访问接口</li><li>使得数据解构能按次序排列处理</li><li>可以使用ES6最新命令 for of进行遍历</li></ul><p><strong>5.3.3 可迭代对象是什么？</strong></p><p>可迭代对象是 Iterator 接口的实现，有两个协议：可迭代协议和迭代器协议。</p><ul><li>可迭代协议：对象必须实现 iterator 方法，即对象或其原型链上必须有一个名叫 Symbol.iterator 的属性，该属性的值为无参函数，函数返回迭代器协议。</li><li>迭代器协议：产生一个有限或无限序列值，必须实现 next() 方法，方法返回对象有 done 和 value 属性。</li></ul><p><strong>5.3.4 实现一个可以 for of 遍历的对象</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            next<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        value<span class="token punctuation">:</span> obj<span class="token punctuation">.</span>count<span class="token punctuation">,</span>                        done<span class="token punctuation">:</span> <span class="token boolean">false</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        value<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>                        done<span class="token punctuation">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>或者</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> iterable <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-遍历"><a href="#6-遍历" class="headerlink" title="6. 遍历"></a>6. 遍历</h4><h5 id="6-1-for-in"><a href="#6-1-for-in" class="headerlink" title="6.1. for in"></a>6.1. for in</h5><ul><li>以任意顺序遍历一个对象的除 Symbol 以外的可枚举属性。</li><li>不适合遍历数组，主要应用于遍历对象<ol><li>数组对象的所有自己的和继承的属性都会被迭代</li><li>for..in 不能保证保持元素顺序。</li><li>执行慢：需遍历对象属性链</li></ol></li><li>可与 break，continue，return 配合</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'test1'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'test2'</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//a test1, b test2</span></code></pre><h5 id="6-1-for-of"><a href="#6-1-for-of" class="headerlink" title="6.1. for of"></a>6.1. for of</h5><ul><li>遍历可迭代对象，包括 Array，Map，Set，String，arguments 对象，NodeList 对象</li><li>仅遍历当前对象</li><li>可与 break，continue，return 配合</li></ul><h4 id="7-Object"><a href="#7-Object" class="headerlink" title="7. Object"></a>7. Object</h4><h5 id="7-1-Object-keys"><a href="#7-1-Object-keys" class="headerlink" title="7.1. Object.keys"></a>7.1. Object.keys</h5><p>返回一个给定对象的自身可枚举属性组成的数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [a, b]</span></code></pre><h5 id="7-2-Object-values"><a href="#7-2-Object-values" class="headerlink" title="7.2. Object.values"></a>7.2. Object.values</h5><p>返回一个给定对象自身的所有可枚举属性值的数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2]</span></code></pre><h5 id="7-3-Object-entries"><a href="#7-3-Object-entries" class="headerlink" title="7.3. Object.entries"></a>7.3. Object.entries</h5><p>返回一个给定对象自身可枚举属性的键值对数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ [ 'a', 1 ], [ 'b', 2 ] ]</span></code></pre><p>手写实现一个函数模拟Object.entries?</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getObjectEntries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>prop<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getObjectEntries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="7-4-Object-getOwnPropertyNames"><a href="#7-4-Object-getOwnPropertyNames" class="headerlink" title="7.4. Object.getOwnPropertyNames"></a>7.4. Object.getOwnPropertyNames</h5><p>返回一个数组，该数组对元素是 obj 自身拥有的枚举或不可枚举属性名称字符串。</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>ann <span class="token operator">=</span> <span class="token string">'1111'</span><span class="token punctuation">;</span><span class="token keyword">const</span> testData <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> testData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "a", "b", "ann"</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>testData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["a", "b"]</span></code></pre><h5 id="7-5-Object-getOwnPropertyDescriptor"><a href="#7-5-Object-getOwnPropertyDescriptor" class="headerlink" title="7.5. Object.getOwnPropertyDescriptor"></a>7.5. Object.getOwnPropertyDescriptor</h5><p>返回指定对象上一个自有属性对应的属性描述符。对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。</p><p>举个栗子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  {</span><span class="token comment" spellcheck="true">//    value: 123,</span><span class="token comment" spellcheck="true">//    writable: true, //可写，修改属性值</span><span class="token comment" spellcheck="true">//    enumerable: true, //可被for in遍历    </span><span class="token comment" spellcheck="true">//    configurable: true //删除属性或修改属性特性</span><span class="token comment" spellcheck="true">//  }</span></code></pre><p>再看个栗子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">'p1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token string">'ann'</span><span class="token punctuation">,</span>  writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>object1<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token string">'not ann'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'ann'</span></code></pre><blockquote><p>getOwnPropertyDescriptors：<br>返回所指定对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。</p></blockquote><h5 id="7-6-Object-create"><a href="#7-6-Object-create" class="headerlink" title="7.6. Object.create"></a>7.6. Object.create</h5><p>创建一个新对象，两个参数：</p><ul><li>第一个参数作为新对象的 [[proto]] 属性的值，根据已有对象作为原型，创建新对象</li><li>第二个参数为可选对象，每个属性都会作为新对象的自身属性，对象的属性值以 descriptor 的形式出现，且 enumerable 默认为 false</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> b <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回纯{}对象，无prototype；创建一个纯净的对象</span>b <span class="token comment" spellcheck="true">// {}</span>b<span class="token punctuation">.</span>__proto__ <span class="token comment" spellcheck="true">// undefined</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// throw error</span></code></pre><h5 id="7-6-Object-defineProperty"><a href="#7-6-Object-defineProperty" class="headerlink" title="7.6. Object.defineProperty"></a>7.6. Object.defineProperty</h5><p>为 ES5 属性，也扩展一下。</p><p>用于在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对象，属性名称，描述符对象</span></code></pre><blockquote><p>扩展 - object 属性：object 包括属性和方法，其中属性分为数据属性和访问器属性</p><ul><li><p>数据属性</p><ul><li>configurable：通过 delete 删除并重新定义属性，是否可修改属性的特性，已经是否可把它改为访问器属性，默认 true。</li><li>enumerable：是否可通过 for-in 循环，默认 true。</li><li>writable：属性值是否可修改，默认 true。</li><li>value：属性实际的值，默认为 undefined</li></ul></li><li><p>访问器属性</p><ul><li>configurable</li><li>enumerable</li><li>get：获取函数，在读取属性时调用，默认 undefined</li><li>set：设置函数，在写入属性时调用，默认 undefined</li></ul></li></ul></blockquote><h4 id="8-Array"><a href="#8-Array" class="headerlink" title="8. Array"></a>8. Array</h4><h5 id="8-1-Array-flat"><a href="#8-1-Array-flat" class="headerlink" title="8.1. Array.flat"></a>8.1. Array.flat</h5><p>按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><ul><li>depth 可选<br>要提取嵌套数组的结构深度，默认值为 1</li></ul><p><code>let newArray = arr.flat([depth]);</code></p><h5 id="8-2-Array-includes"><a href="#8-2-Array-includes" class="headerlink" title="8.2. Array.includes"></a>8.2. Array.includes</h5><p>判断一个数组是否包含一个指定的值，返回 boolean。</p><ul><li><p>valueToFind<br>需要查找的元素值。</p></li><li><p>fromIndex 可选<br>开始查找的索引，默认为 0。</p></li></ul><p><code>arr.includes(valueToFind[, fromIndex])</code></p><h5 id="8-3-Array-find"><a href="#8-3-Array-find" class="headerlink" title="8.3. Array.find"></a>8.3. Array.find</h5><p>返回数组中满足提供的测试函数的第一个元素的值，否则返回 undefined。</p><p><code>arr.find(callback(element, index, arr)[, thisArg])</code></p><h5 id="8-4-Array-from"><a href="#8-4-Array-from" class="headerlink" title="8.4. Array.from"></a>8.4. Array.from</h5><p>从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><ul><li>arrayLike<br>想要转换成数组的伪数组对象或可迭代对象。</li><li>mapFn 可选<br>如果指定了该参数，新数组中的每个元素会执行该回调函数。</li></ul><p><code>Array.from(arrayLike[, mapFn[, thisArg]])</code></p><h5 id="8-5-Array-of"><a href="#8-5-Array-of" class="headerlink" title="8.5. Array.of"></a>8.5. Array.of</h5><p>创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p><p><code>Array.of(element0[, element1[, ...[, elementN]]])</code></p><h4 id="9-Proxy-和-Reflect"><a href="#9-Proxy-和-Reflect" class="headerlink" title="9. Proxy 和 Reflect"></a>9. Proxy 和 Reflect</h4><h5 id="9-1-Proxy"><a href="#9-1-Proxy" class="headerlink" title="9.1. Proxy"></a>9.1. Proxy</h5><p>用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><ul><li>定义： const proxy = new Proxy(target, handler)，target代理对象，handle捕获器</li><li>handle 参数 get：trapTarget(目标对象)，property(代理属性)，receiver(代理对象)</li><li>handle 参数 set：trapTarget(目标对象)，property(代理属性)，value(赋给属性的值)，receiver(代理对象)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`getting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">[</span>propKey<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`setting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>something <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="9-2-Reflect"><a href="#9-2-Reflect" class="headerlink" title="9.2. Reflect"></a>9.2. Reflect</h5><p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。</p><ul><li>将 Object 对象上的明显属于语言内部的方法，放在 Reflect 对象上</li><li>让 Object 操作变为函数行为，eg：name in obj 和 delete，变为 Reflect.has(obj,name) 和 Reflect.deleteProperty(obj, name)</li><li>Reflect 对象的方法与 Proxy 对象的方法一一对应。让 Proxy 对象可以方便的调用对应的 Reflect 方法，完成默认行为。</li><li>通过 defineProperty 设置 writable 为 false 的对象，不能使用 Proxy。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> ECMAScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> ESNext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象＆原型链</title>
      <link href="2021/04/19/front-end/relearn/mian-xiang-dui-xiang-bian-cheng-yuan-xing-ji-yuan-xing-lian/"/>
      <url>2021/04/19/front-end/relearn/mian-xiang-dui-xiang-bian-cheng-yuan-xing-ji-yuan-xing-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>清楚面向对象编程思想</li><li>深入原型及原型链： 对象间关系</li><li>手写实现 <code>new</code> 函数</li><li>深入继承：多种继承的实现</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、-面向对象编程"><a href="#一、-面向对象编程" class="headerlink" title="一、 面向对象编程"></a>一、 面向对象编程</h3><p>实际是一种思想。当问题复杂或参与方较多建议使用，能简化问题，方便后期扩展和维护。</p><h3 id="二、-原型及原型链"><a href="#二、-原型及原型链" class="headerlink" title="二、 原型及原型链"></a>二、 原型及原型链</h3><p>原型链实际是对象间的关系：由 <code>__proto__</code> 和 <code>prototype</code> 连接的链条。</p><h4 id="1-手写实现-new-函数"><a href="#1-手写实现-new-函数" class="headerlink" title="1. 手写实现 new 函数"></a>1. 手写实现 new 函数</h4><p>在内存中开辟一段空间，添加原型，将 <code>this</code> 挂在这个对象上</p><p><strong>具体</strong></p><ol><li>用 <code>new Object()</code> 的方式新建了一个对象 obj</li><li>取第一个参数，即传入的构造函数。此外因 <code>shift</code> 会修改原数组，所以 <code>arguments</code> 会被去除第一个参数</li><li>将 obj 的原型指向构造函数，这样 obj 就可以访问到构造函数原型中的属性</li><li>使用 <code>apply</code>，改变构造函数 <code>this</code> 的指向到新建的对象，这样 obj 就可以访问到构造函数中的属性</li><li>返回 obj</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> Constructor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> Constructor<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> ret <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> ret <span class="token punctuation">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="三、-继承"><a href="#三、-继承" class="headerlink" title="三、 继承"></a>三、 继承</h3><p>父类拥有的方法和属性、静态方法等，子类也要拥有。</p><h4 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Person 的实例同时包含实例属性方法和原型属性方法</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 保证 student.constructor 类型正确</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>缺点</strong></p><p>1.引用类型的属性被所有实例共享<br>2.在创建 ChildCon 的实例时，不能向 ParentCon 传参</p><h4 id="2-构造函数继承（经典继承）"><a href="#2-构造函数继承（经典继承）" class="headerlink" title="2. 构造函数继承（经典继承）"></a>2. 构造函数继承（经典继承）</h4><p>将父类的实例作为子类的原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name；<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 多参： Person.apply(this, Array.from(arguments).slice(1));</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>缺点</strong></p><ol><li>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</li><li>函数是引用类型，父类的函数在子类的实例下不共享</li></ol><h4 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h4><p>原型式继承和构造函数继承的组合，兼具了二者的优点。<br>普通属性使用构造函数继承，函数使用原型链继承</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span><span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span></code></pre><p><strong>缺点</strong></p><p>调用了两次父类的构造函数，造成了性能上的浪费</p><h4 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h4><p>实质：对参数对象的一个浅复制<br>ES5 Object.create 的模拟实现，传入的对象作为创建的对象的原型。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>缺点：同 原型链继承</strong></p><ol><li>父类的引用属性会被所有子类实例共享</li><li>子类构建实例时不能向父类传递参数</li></ol><h4 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h4><p>使用原型式继承获得一个目标对象的浅复制，然后增强这个浅复制的能力。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> createObj <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    clone<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>缺点：同 借用构造函数</strong></p><ol><li>每次创建对象都会创建一遍方法</li></ol><h4 id="6-寄生组合式继承（基于组合继承）"><a href="#6-寄生组合式继承（基于组合继承）" class="headerlink" title="6. 寄生组合式继承（基于组合继承）"></a>6. 寄生组合式继承（基于组合继承）</h4><p>只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Parent <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> Child <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 关键的三步</span><span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>优点</strong></p><p>因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费</p><h4 id="7-ES6-Class-extends"><a href="#7-ES6-Class-extends" class="headerlink" title="7. ES6 Class extends"></a>7. ES6 Class extends</h4><p>寄生组合继承的语法糖，是ES5继承的语法糖<br>本质上，ES6 的类只是 ES5 的构造函数的一层包装</p><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><h3 id="1-类数组转为数组"><a href="#1-类数组转为数组" class="headerlink" title="1. 类数组转为数组"></a>1. 类数组转为数组</h3><ul><li>[…arguments].slice()</li><li>Array.prototype.slice.call(arguments)</li><li>Array.from</li><li>[].slice.call(arguments)</li></ul><h3 id="2-原型链神图"><a href="#2-原型链神图" class="headerlink" title="2. 原型链神图"></a>2. 原型链神图</h3><p><img src="/static/xmind/front_end/relearn/oop-chain.png" alt></p><h4 id="2-1-玩一玩-Function-proto-Function-prototype"><a href="#2-1-玩一玩-Function-proto-Function-prototype" class="headerlink" title="2.1. 玩一玩~ Function.proto === Function.prototype"></a>2.1. 玩一玩~ Function.<strong>proto</strong> === Function.prototype</h4><p><strong>1. Why yes？</strong></p><p>按照 JavaScript 中“实例”的定义，a 是 b 的实例即 a instanceof b 为 true，默认判断条件就是 b.prototype 在 a 的原型链上。</p><p>而 Function instanceof Function 为 true，本质上即 Object.getPrototypeOf(Function) === Function.prototype，正符合此定义。</p><p><strong>2. Why no？</strong></p><p>Function 是 built-in 的对象，也就是并不存在“Function对象由Function构造函数创建”这样显然会造成鸡生蛋蛋生鸡的问题。实际上，当你直接写一个函数时（如 function f() {} 或 x =&gt; x），也不存在调用 Function 构造器，只有在显式调用 Function 构造器时（如 new Function(‘x’, ‘return x’) ）才有。</p><p>把  Function.<strong>proto</strong> 指向 Function.prototype 是为了保证原型链的完整，让 Function 可以获取定义在 Object.prototype 上的方法。</p><p><img src="/static/xmind/front_end/relearn/oop.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探TypeScript</title>
      <link href="2021/04/12/front-end/relearn/chu-tan-typescript/"/>
      <url>2021/04/12/front-end/relearn/chu-tan-typescript/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>熟悉 ts </li><li>面试题及实战</li><li>了解 ts 基本原理</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="0-准备"><a href="#0-准备" class="headerlink" title="0. 准备"></a>0. 准备</h3><pre><code>npm install -g typescripttsc hello.ts</code></pre><p>TypeScript 基础方面总结请跳到文底看 xmind 文件呢，或者阅览<a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">官方文档</a>。<br>贴心准备：<a href="https://www.tslang.cn/docs/handbook/typescript-in-5-minutes.html" target="_blank" rel="noopener">TypeScript中文网</a></p><h3 id="1-type-和-interface-的异同"><a href="#1-type-和-interface-的异同" class="headerlink" title="1. type 和 interface 的异同"></a>1. type 和 interface 的异同</h3><p>用interface描述数据结构，用type描述类型</p><p><strong>相同点</strong></p><ul><li>都可以描述一个对象或者函数</li><li>都允许扩展 extends：interface 和 type 都可以拓展，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 extends interface ，语法不同。</li></ul><p><strong>不同点</strong></p><ul><li><p>type 可以声明基本类型别名，联合类型，元组等类型</p></li><li><p>type 语句中还可以使用typeof获取实例的类型进行赋值</p></li><li><p>interface 能够声明合并</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 都可以描述一个对象或者函数</span><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string  age<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">SetUser</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">,</span> age<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span>type User <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string  age<span class="token punctuation">:</span> number<span class="token punctuation">}</span>type SetUser <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">,</span> age<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 都允许扩展</span><span class="token comment" spellcheck="true">// 2.1 interface extends interface</span><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.2 type extends type</span>type Name <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">}</span>type User <span class="token operator">=</span> Name <span class="token operator">&amp;</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> number <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.3 interface extends type</span>type Name <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.4 type extends interface</span><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">}</span>type User <span class="token operator">=</span> Name <span class="token operator">&amp;</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3. 只有 type 可以做的</span><span class="token comment" spellcheck="true">// 3.1 type 声明基本类型别名</span>type Name <span class="token operator">=</span> string<span class="token comment" spellcheck="true">// 3.2 type 声明联合类型</span><span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token function">wang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>  <span class="token function">miao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type Pet <span class="token operator">=</span> Dog <span class="token operator">|</span> Cat<span class="token comment" spellcheck="true">// 3.2 type 声明元组类型，具体定义数组每个位置的类型</span>type PetList <span class="token operator">=</span> <span class="token punctuation">[</span>Dog<span class="token punctuation">,</span> Pet<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 4. 当你想获取一个变量的类型时，使用 typeof</span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>type B <span class="token operator">=</span> <span class="token keyword">typeof</span> div</code></pre></li></ul><h3 id="2-如何基于一个已有类型-扩展出一个大部分内容相似-但是有部分区别的类型"><a href="#2-如何基于一个已有类型-扩展出一个大部分内容相似-但是有部分区别的类型" class="headerlink" title="2. 如何基于一个已有类型, 扩展出一个大部分内容相似, 但是有部分区别的类型?"></a>2. 如何基于一个已有类型, 扩展出一个大部分内容相似, 但是有部分区别的类型?</h3><p>  可以通过 Pick 和 Omit</p><pre class=" language-ts"><code class="language-ts">  <span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span>    sex<span class="token punctuation">:</span> <span class="token keyword">number</span>    height<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token punctuation">}</span>  type Sex <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Test<span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token operator">></span>  <span class="token keyword">const</span> a<span class="token punctuation">:</span> Sex <span class="token operator">=</span> <span class="token punctuation">{</span> sex<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>  type WithoutSex <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Test<span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token operator">></span>  <span class="token keyword">const</span> b<span class="token punctuation">:</span> WithoutSex <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Axp'</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token string">'158cm'</span> <span class="token punctuation">}</span></code></pre><h3 id="3-什么是泛型-泛型的具体使用"><a href="#3-什么是泛型-泛型的具体使用" class="headerlink" title="3. 什么是泛型, 泛型的具体使用?"></a>3. 什么是泛型, 泛型的具体使用?</h3><p>  泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，使用时再去指定类型的一种特性。</p><p>  可以把泛型理解为代表类型的参数</p><p><img src="/static/xmind/front_end/relearn/ts.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器详解</title>
      <link href="2021/04/11/front-end/relearn/liu-lan-qi-xiang-jie/"/>
      <url>2021/04/11/front-end/relearn/liu-lan-qi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>了解常⻅浏览器 JS 对象常⻅ API 及⽤法</li><li>深入浏览器事件模型：捕获与冒泡</li><li>封装函数：多浏览器兼容的绑定事件函数</li><li>理解 ajax 及 fetch API</li><li>封装一个 ajax 请求</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="1-浏览器内置对象"><a href="#1-浏览器内置对象" class="headerlink" title="1. 浏览器内置对象"></a>1. 浏览器内置对象</h3><p><strong>浏览器对象模型</strong>（Browser Object Model (BOM)）允许 JavaScript 与浏览器对话。</p><p><strong>BOM</strong> 由多个对象组成，其中代表浏览器窗口的 Window 对象是 BOM 的顶层对象，其他对象都是该对象的子对象。</p><h3 id="2-浏览器事件模型"><a href="#2-浏览器事件模型" class="headerlink" title="2. 浏览器事件模型"></a>2. 浏览器事件模型</h3><p>浏览器事件模型中的过程主要分为三个阶段：捕获阶段、目标阶段、冒泡阶段。</p><p><img src="/static/xmind/front_end/relearn/browser-event.png" alt="事件模型图"></p><h5 id="2-1-封装多浏览器兼容的绑定事件函数"><a href="#2-1-封装多浏览器兼容的绑定事件函数" class="headerlink" title="2.1. 封装多浏览器兼容的绑定事件函数"></a>2.1. 封装多浏览器兼容的绑定事件函数</h5><h5 id="2-2-事件委托"><a href="#2-2-事件委托" class="headerlink" title="2.2. 事件委托"></a>2.2. 事件委托</h5><p><strong>问题</strong></p><p>页面为 ul + li 结构，点击每个 li alert 对应的索引</p><p><strong>思路</strong></p><p>利用冒泡，将 li 的点击事件委托给 ul 实现</p><p><strong>实现</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> 2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> 3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> 4 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> 6 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 方式 1：事件委托给 ul</span>    <span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> liList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>indexOf<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>liList<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`内容为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token punctuation">.</span>innerHTML<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，索引为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 方式 2：给每个 li 绑定事件</span>    <span class="token comment" spellcheck="true">// const liList = document.getElementsByTagName("li");</span>    <span class="token comment" spellcheck="true">// for (let i = 0; i &lt; liList.length; i++) {</span>    <span class="token comment" spellcheck="true">//     liList[i].addEventListener('click', function (e) {</span>    <span class="token comment" spellcheck="true">//     alert(`内容为${e.target.innerHTML}, 索引为${i}`);</span>    <span class="token comment" spellcheck="true">//   })</span>    <span class="token comment" spellcheck="true">// }</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">ul li </span><span class="token punctuation">{</span>      <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3-浏览器请求相关"><a href="#3-浏览器请求相关" class="headerlink" title="3. 浏览器请求相关"></a>3. 浏览器请求相关</h3><h4 id="3-1-封装Ajax请求"><a href="#3-1-封装Ajax请求" class="headerlink" title="3.1. 封装Ajax请求"></a>3.1. 封装Ajax请求</h4><p><img src="/static/xmind/front_end/relearn/browser.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化</title>
      <link href="2021/04/05/front-end/relearn/js-mo-kuai-hua-xiang-jie/"/>
      <url>2021/04/05/front-end/relearn/js-mo-kuai-hua-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>首先我们明确一下：编程的本质是管理变量呀。为了更好的管理代码、组织及通信的模式而出现了模块化的技术方案。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>为什么学</strong></p><ul><li>知古鉴今，单一职，关注分离</li><li>深入理解 JS 模块化</li></ul><p><strong>能学到什么</strong></p><ul><li>了解模块化概念</li><li>手写实现</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>本质上模块就是一种提供对外通信接口，进行代码切分/组合的管理方式。其呈现的方式因不同的模块化方案而不同，基本是以文件粒度区分。</p><h4 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h4><ul><li>抽取公共代码</li><li>隔离作用域</li><li>依赖管理</li></ul><h4 id="2-发展历史"><a href="#2-发展历史" class="headerlink" title="2. 发展历史"></a>2. 发展历史</h4><p><strong>2.1. 函数时代</strong></p><p>缺点：命名冲突、全局污染</p><p><strong>2.2. 命名空间</strong></p><p>优点：函数命个名，单一职<br>缺点：能访问还能改</p><p><strong>2.3. 闭包</strong></p><p>现代模块化的基石<br>特点：私有性、可往里塞东西；依赖注入<br>缺点：函数通信，window 上挂</p><p><strong>2.4. 接口方式</strong></p><p>不挂全局，写个函数 return 结果的形式<br>现在模块化机制的基本雏形</p><h3 id="二、类别"><a href="#二、类别" class="headerlink" title="二、类别"></a>二、类别</h3><p>历史：无模块化(IIFE) -&gt; CommonJS -&gt; AMD -&gt; CMD -&gt; ESModule，特殊UMD</p><h4 id="1-AMD-Asynchronous-Modules-Definition"><a href="#1-AMD-Asynchronous-Modules-Definition" class="headerlink" title="1 AMD (Asynchronous Modules Definition)"></a>1 AMD (Asynchronous Modules Definition)</h4><ul><li>异步模块定义，浏览器端运行，所有模块默认都是异步加载</li><li>代表技术实现 <a href="https://requirejs.org/docs/api.html" target="_blank" rel="noopener">RequireJS</a></li><li>使用：定义 <code>define</code>、加载 <code>require</code> 、配置 <code>config</code></li></ul><h4 id="2-CMD-Common-Module-Definition"><a href="#2-CMD-Common-Module-Definition" class="headerlink" title="2 CMD (Common Module Definition)"></a>2 CMD (Common Module Definition)</h4><ul><li>通用模块定义</li><li>代表人物玉伯，代表技术实现 Seajs</li></ul><h4 id="3-CMJ-CommonJS"><a href="#3-CMJ-CommonJS" class="headerlink" title="3 CMJ(CommonJS)"></a>3 CMJ(CommonJS)</h4><h4 id="4-ESM"><a href="#4-ESM" class="headerlink" title="4 ESM"></a>4 ESM</h4><ul><li>服务端和浏览器端通用，ESModule 由 JS 解释器实现，CMJ 和 AMD 是在宿主环境中运行时实现</li><li><code>import</code> 输入、<code>export</code> 输出</li></ul><h4 id="5-UMD"><a href="#5-UMD" class="headerlink" title="5 UMD"></a>5 UMD</h4><p>组合：AMD 和 CommonJS</p><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><p>待更新…</p><p><img src="/static/xmind/front_end/relearn/modular.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
            <tag> 前端模块化 </tag>
            
            <tag> 前端进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise规范及应用</title>
      <link href="2021/04/04/front-end/relearn/promise-gui-fan-ji-ying-yong/"/>
      <url>2021/04/04/front-end/relearn/promise-gui-fan-ji-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>为什么学</strong></p><ul><li>Promise 重要性：async/await 语法的基础，JavaScript 中处理异步的标准形式</li><li>深入理解 Promises 运行机制</li></ul><p><strong>能学到什么</strong></p><ul><li>解读 Promises/A+ 规范</li><li>实现一个 Promise</li><li>简介 Generator 和 Async</li></ul><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="一、-解读-Promise-A-规范"><a href="#一、-解读-Promise-A-规范" class="headerlink" title="一、 解读 Promise/A+规范"></a>一、 解读 Promise/A+规范</h3><p><a href="https://promisesaplus.com/" target="_blank" rel="noopener">规范内容</a><br><a href="https://www.ituring.com.cn/article/66566" target="_blank" rel="noopener">【翻译】Promises/A+规范</a></p><h4 id="1-了解术语"><a href="#1-了解术语" class="headerlink" title="1. 了解术语"></a>1. 了解术语</h4><ul><li><code>promise</code> 是一个包含 then 方法的对象或函数，该方法符合规范指定的行为。</li><li><code>thenable</code> 是一个包含 then 方法和对象或者函数。</li><li><code>value</code> 就是任意合法 JS 值。</li><li><code>exception</code> 就是 throw 语句抛出的值。</li><li><code>reason</code> 是一个指示 promise 为什么被 rejected 的值。</li></ul><h4 id="2-Promise-状态"><a href="#2-Promise-状态" class="headerlink" title="2. Promise 状态"></a>2. Promise 状态</h4><ul><li><p><strong>pending</strong><br>初始状态，可改变<br>在 resolve 和 reject 前都处于这个状态</p><pre><code>```--&gt; resolve(value) --&gt; fulfilled--&gt; reject(reason) --&gt; rejected```</code></pre></li><li><p><strong>fulfilled</strong><br>一次性特征：最终态，不可变<br>必须拥有一个 value 值</p></li><li><p><strong>rejected</strong><br>最终态，不可变<br>必须拥有一个 reason</p></li></ul><h4 id="3-Then-方法"><a href="#3-Then-方法" class="headerlink" title="3. Then 方法"></a>3. Then 方法</h4><p>promise 必须有 then 方法，接受 <code>onFulfilled</code> 和 <code>onRejected</code> 参数。</p><h5 id="3-1-参数规范"><a href="#3-1-参数规范" class="headerlink" title="3.1. 参数规范"></a>3.1. 参数规范</h5><ul><li>函数：必须最多执行一次</li><li>非函数：忽略，返回默认值/函数</li></ul><h5 id="3-2-参数特性"><a href="#3-2-参数特性" class="headerlink" title="3.2. 参数特性"></a>3.2. 参数特性</h5><p>微任务阶段执行，执行时机：</p><ul><li>promise –&gt; fulfilled/rejected 时，调用 onFulFilled(value) / onRejected(reson)</li><li>在 promise 变成 fulfilled/rejected 之前，不应该调用 onFulfilled/onRejected</li><li>只能调用一次</li></ul><h4 id="4-then-方法可以调用多次"><a href="#4-then-方法可以调用多次" class="headerlink" title="4. then 方法可以调用多次"></a>4. then 方法可以调用多次</h4><p>执行时机：</p><p>promise –&gt; fulfilled / rejected 后，按照注册的顺序执行</p><h4 id="5-返回值：promise"><a href="#5-返回值：promise" class="headerlink" title="5. 返回值：promise"></a>5. 返回值：promise</h4><p>若返回非函数：</p><p>promise2 以 promise1 的 value/reson 触发 fulfilled</p><p>返回函数：</p><p>onFulfilled / onRejected 执行，过程中抛出 e，promise2 需要 reject</p><p>结果为 x，调用 <code>resolvePromise</code></p><h4 id="6-resolvePromise-promise2-x-resolve-reject"><a href="#6-resolvePromise-promise2-x-resolve-reject" class="headerlink" title="6. resolvePromise(promise2, x, resolve, reject)"></a>6. resolvePromise(promise2, x, resolve, reject)</h4><h5 id="6-1-参数"><a href="#6-1-参数" class="headerlink" title="6.1 参数"></a>6.1 参数</h5><ul><li>promise2：当前第一个 promise 的返回</li><li>x：onFulfilled/onRejected 执行结果</li></ul><h5 id="6-2-规范"><a href="#6-2-规范" class="headerlink" title="6.2 规范"></a>6.2 规范</h5><p><strong>1. 避免死循环</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span>｛    reject typeError｝</code></pre><p><strong>2. type x</strong></p><ul><li><p>promise，取决于 x 的状态<br>pending：promise 必须在 pending 状态，直到 x 的状态变更<br>fulfilled：value -&gt; fulfilled<br>rejected：reason -&gt; rejected</p></li><li><p>Object || Function<br><code>const then = x.then</code></p></li></ul><p>如果报错，reject reson</p><ul><li>非函数：resolve(x)</li><li>函数：then.call(x, resolvePromiseFn, rejectPromiseFn)</li></ul><h3 id="二、-根据-Promises-A-规范实现一个-Promise"><a href="#二、-根据-Promises-A-规范实现一个-Promise" class="headerlink" title="二、 根据 Promises/A+ 规范实现一个 Promise"></a>二、 根据 Promises/A+ 规范实现一个 Promise</h3><h4 id="1-试着实现"><a href="#1-试着实现" class="headerlink" title="1. 试着实现"></a>1. 试着实现</h4><p><strong>0. 公共方法</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">isFunction</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> param <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><strong>1. 定义三种状态，设置初始态，用 Class 实现</strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> PENDING <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> FULFILLED <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> REJECTED <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">MPromise</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> PENDING<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><strong>2. 添加 reject 和 resolve 方法更改状态</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 顺序注意一下: fulFilledFnWithCatch 用到</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> FULFILLED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><strong>3. 添加 Promise 入参，函数同步执行，异常需reject</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">constructor</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> PENDING<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// bind: 改变 this 指向，返回一个函数</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><strong>4. 实现 then 方法</strong></p><p>  4.1 实现 then 逻辑</p><pre><code>```js// then接收两个参数, onFulfilled 和 onRejectedthen(onFulfilled, onRejected) {  //检查并处理参数, 之前提到的如果不是function, 就忽略. 这个忽略指的是原样返回value或者reason.  const fulFilledFn = this.isFunction(onFulfilled) ? onFulfilled : (value) =&gt; {    return value;  }  const rejectedFn = this.isFunction(onRejected) ? onRejected : (reason) =&gt; {    throw reason  };  // 根据当前 promise 的状态, 调用不同的函数  switch (this.status) {    case FULFILLED: {      fulFilledFn(this.value);      break;    }    case REJECTED: {      rejectedFn(this.reason);      break;    }    // then 可以链式调用，存储回调    case PENDING: {      this.FULFILLED_CALLBACK_LIST.push(realOnFulfilled);      this.REJECTED_CALLBACK_LIST.push(realOnRejected);      break;    }  }}```</code></pre><p>  4.2 status 发生变化时候去执行所有的回调</p><pre><code>```jsget status() {  return this._status;}set status(newStatus) {  this._status = newStatus;  switch (newStatus) {    case FULFILLED: {      this.FULFILLED_CALLBACK_LIST.forEach(callback =&gt; {        callback(this.value);      })      break;    }    case REJECTED: {      this.REJECTED_CALLBACK_LIST.forEach(callback =&gt; {        callback(this.reason);      })      break;    }  }}```</code></pre><p><strong>5. 实现 resolvePromise 方法</strong></p><p><strong>6. Promise.reject和Promise.resolve及catch实现</strong></p><p><strong>7. promise.race和promise.all实现</strong></p><h4 id="2-贴下完整代码"><a href="#2-贴下完整代码" class="headerlink" title="2. 贴下完整代码"></a>2. 贴下完整代码</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PENDING <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span><span class="token keyword">const</span> FULFILLED <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span><span class="token keyword">const</span> REJECTED <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MPromise</span> <span class="token punctuation">{</span>  FULFILLED_CALLBACK_LIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  REJECTED_CALLBACK_LIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  _status <span class="token operator">=</span> PENDING<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> PENDING<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// bind: 改变 this 指向，返回一个函数</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_status<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">status</span><span class="token punctuation">(</span>newStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">=</span> newStatus<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>newStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> FULFILLED<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>FULFILLED_CALLBACK_LIST<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> REJECTED<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>REJECTED_CALLBACK_LIST<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 顺序注意一下: fulFilledFnWithCatch 用到</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> FULFILLED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fulFillFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span> <span class="token operator">?</span> onFulfilled <span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rejectFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后续优化：用装饰器能少写一个try catch；isFunction精简一个</span>    <span class="token keyword">const</span> fulFilledFnWithCatch <span class="token operator">=</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> newPromise<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">fulFillFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> rejectedFnWithCatch <span class="token operator">=</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> newPromise<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">rejectFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> FULFILLED<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里可以直接调用Promise?</span>        <span class="token keyword">const</span> newPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">fulFilledFnWithCatch</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> newPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> newPromise<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> REJECTED<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">rejectedFnWithCatch</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> newPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> newPromise<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> PENDING<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newPromise <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>FULFILLED_CALLBACK_LIST<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            <span class="token function">fulFilledFnWithCatch</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> newPromise<span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>REJECTED_CALLBACK_LIST<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            <span class="token function">rejectedFnWithCatch</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> newPromise<span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> newPromise<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">resolvePromise</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一层一层找，直到 x 不是 function/object/promise，resolve 出去</span>    <span class="token comment" spellcheck="true">// 中间碰到报错都 reject 出去</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPromise <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// TypeError 作用域找到了，做不合理的操作</span>      <span class="token comment" spellcheck="true">// ReferenceError 作用域都找不到该变量</span>      <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'The promise and the return value are the same'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> then <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// then 的 this 本来指向就为 x</span>          then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>            x<span class="token punctuation">,</span>            <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>              called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>              called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">isFunction</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> param <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// add：默认产生一个成功的 promise。</span>  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// static race(promiseList) {</span>  <span class="token comment" spellcheck="true">//   return new MPromise((resolve, reject) => {</span>  <span class="token comment" spellcheck="true">//       const length = promiseList.length;</span>  <span class="token comment" spellcheck="true">//       if (length === 0) {</span>  <span class="token comment" spellcheck="true">//           return resolve();</span>  <span class="token comment" spellcheck="true">//       } else {</span>  <span class="token comment" spellcheck="true">//           for (let i = 0; i &lt; length; i++) {</span>  <span class="token comment" spellcheck="true">//               MPromise.resolve(promiseList[i]).then(</span>  <span class="token comment" spellcheck="true">//                   (value) => {</span>  <span class="token comment" spellcheck="true">//                       return resolve(value);</span>  <span class="token comment" spellcheck="true">//                   },</span>  <span class="token comment" spellcheck="true">//                   (reason) => {</span>  <span class="token comment" spellcheck="true">//                       return reject(reason);</span>  <span class="token comment" spellcheck="true">//                   });</span>  <span class="token comment" spellcheck="true">//           }</span>  <span class="token comment" spellcheck="true">//       }</span>  <span class="token comment" spellcheck="true">//   });</span>  <span class="token comment" spellcheck="true">// }</span><span class="token punctuation">}</span></code></pre><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><h3 id="一、-迭代器-Iterator"><a href="#一、-迭代器-Iterator" class="headerlink" title="一、 迭代器 Iterator"></a>一、 迭代器 Iterator</h3><p>ES6  引入的一种新的遍历机制，也是一种特殊对象，它具有一些专门为迭代过程设计的专有接口。</p><p>可调用 next() 方法，返回一个当前结果对象。</p><p><strong>next()方法：</strong></p><p>value：当前属性的值<br>done：用于判断是否遍历结束，当没有更多可返回的数据时，返回 true</p><h3 id="二、-生成器-Generator"><a href="#二、-生成器-Generator" class="headerlink" title="二、 生成器 Generator"></a>二、 生成器 Generator</h3><p>生成器是一种返回迭代器的函数，通过 function 关键字后的星号(*)来表示，函数中会用到新的关键字 yield。星号可以紧挨着 function 关键字，也可以在中间添加一个空格.</p><h3 id="三、-Async-和-Await"><a href="#三、-Async-和-Await" class="headerlink" title="三、 Async 和 Await"></a>三、 Async 和 Await</h3><p>实际：Promise 语法糖，同步的形式写</p><p><img src="/static/xmind/front_end/relearn/promise.png" alt="xmind总结"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端进阶 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue详细上手指北</title>
      <link href="2020/06/20/front-end/vue/vue-xiang-xi-shang-shou-zhi-bei/"/>
      <url>2020/06/20/front-end/vue/vue-xiang-xi-shang-shou-zhi-bei/</url>
      
        <content type="html"><![CDATA[<p>这是篇教程，跟着我的节奏来，学完后可以独立上手开发 Vue 项目！</p><h2 id="01-快速搭建项目"><a href="#01-快速搭建项目" class="headerlink" title="01 快速搭建项目"></a>01 快速搭建项目</h2><p>本节目的：用 Vue-cli 脚手架搭建一个 Vue 项目。<br><a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">戳官网教程</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="Vue-是什么"><a href="#Vue-是什么" class="headerlink" title="Vue 是什么"></a>Vue 是什么</h4><p>一套用于构建用户界面的前端 JS 框架。<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">戳官网详细介绍</a></p><h4 id="为什么用-Vue"><a href="#为什么用-Vue" class="headerlink" title="为什么用 Vue"></a>为什么用 Vue</h4><p>流行：github 上 star 最多的前端框架，招聘大多要求。<br>学习：上手简单（数据驱动）<br>性能：组件化，性能好，运行速度快</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><strong>Q：Vue 开发跟传统 Web 开发相比的优势？</strong><br>A：传统开发需操作 dom 元素，Vue 只关心图层，用数据驱动视图。减少额代码工作量，能更快地开发迭代项目。</p><hr><h2 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h2><h4 id="1、环境配置：node-js"><a href="#1、环境配置：node-js" class="headerlink" title="1、环境配置：node.js"></a>1、环境配置：node.js</h4><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">戳官网链接下载</a></li><li>下载安装成功后可查看版本<ol><li>打开命令行（Win+R，键入 cmd）输入     node -v</li><li>查看 npm 版本（node 自带安装了 npm）    npm -v</li><li>无报错，即显示了 node 版本即成功</li></ol></li></ul><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h4><p><strong>Q：为什么用 node.js？</strong><br>A：node.js 在这里提供 npm 安装，为了方便模块管理。也可以 Web 页面中直接使用。</p><h4 id="2、安装-vue-cli-包"><a href="#2、安装-vue-cli-包" class="headerlink" title="2、安装 vue/cli 包"></a>2、安装 vue/cli 包</h4><ul><li>命令行输入：<code>npm install -g @vue/cli</code></li><li>安装后，命令行查看版本，输入：<code>vue --version</code></li></ul><h4 id="3、创建项目"><a href="#3、创建项目" class="headerlink" title="3、创建项目"></a>3、创建项目</h4><p>利用脚手架创建一个默认配置的名称为 first_vue 的项目</p><ul><li>到指定文件夹打开命令行</li><li>命令行输入：<code>vue create first_vue</code><br><img src="/static/front-end/vue/tutorial/chapter1_1.png" alt></li><li>完成后显示<br><img src="/static/front-end/vue/tutorial/chapter1_2.png" alt></li><li>命令行进入项目目录和运行项目；浏览器打开<br><img src="/static/front-end/vue/tutorial/chapter1_3.png" alt><br><img src="/static/front-end/vue/tutorial/chapter1_4.png" alt></li></ul><h2 id="02-下一节"><a href="#02-下一节" class="headerlink" title="02 下一节"></a>02 下一节</h2><p>下一节还没写好，客官稍安勿躁~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter手摸手趟坑</title>
      <link href="2020/06/14/front-end/flutter/flutter-shou-mo-shou-tang-keng/"/>
      <url>2020/06/14/front-end/flutter/flutter-shou-mo-shou-tang-keng/</url>
      
        <content type="html"><![CDATA[<p>前段时间由于公司需要，赶鸭子上架，用 Flutter 做了个简单 app，记录下实际中遇到的小坑~</p><h4 id="1-无法将”Unblock-File”项识别为-cndlet、-函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后重试。"><a href="#1-无法将”Unblock-File”项识别为-cndlet、-函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后重试。" class="headerlink" title="1. 无法将”Unblock-File”项识别为 cndlet、 函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后重试。"></a>1. 无法将”Unblock-File”项识别为 cndlet、 函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后重试。</h4><p><span style="color: green;">解决：到 windows 官网更新最新版的 powershell 5.0 版本，安装后重启并再次运行 <code>flutter doctor</code> </span></p><p>1.1、找到 PowerShell 程序，进入命令行窗口；<br>win+R 输入<code>PowerShell</code>；在命令行窗口中输入命令：<code>$PSVersionTable.PSVersion</code><br><img src="en-resource://database/4694:1" alt="4815c08233054a3a9e10834042866e24.png"><br>（实际版本会低于 5.0 才会报错）</p><p>1.2、点击下载 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=54616" target="_blank" rel="noopener">Windows Management Framework 5.1</a><br><img src="en-resource://database/4695:1" alt="5b04a066975eec1656144803c8e21050.png"><br><strong>安装程序遇到错误：0x80240037</strong></p><p>2、把 Win7AndW2K8R2-KB3191566-x64.msu 的后缀名 <code>.msu</code> 改成 <code>.cab</code> 并解压到新文件夹中 cab（名字任起，我把它移到了 E 盘了）<br><img src="en-resource://database/4696:1" alt="12f99cb4a25c46d589616bbf69ac0e88.png"></p><p>3、打开 cmd，以管理员身份运行)，输入：</p><p><code>dism /online /add-package /packagepath:&quot;文件名.cab的完整路径&quot;</code></p><p>注：解压出来可能会有多个.cab，注意输入对应好的文件名.cab（前面下载的名字中是：KB2819745）安装好后，会提示是否立即重新启动：y（重新启动）</p><p><img src="en-resource://database/4697:1" alt="c937cad7c98c9e04edca6e1b07c9bac0.png"></p><p>4、cmd 输入 / 双击 flutter_console.bat 后输入 /打开 PowerShell 输入： <code>flutter doctor</code></p><p><code>WSUSSCAN.cab 是什么？cab 是什么文件？*.cab是微软制定的压缩包文件，常用于软件的安装程序。WSUSSCAN.cab 应该是更新补丁检测文件 补丁的扫描、下载和安装 在安装服务器的机器上同时运行着补丁下载器， 它会自动下载并更新补丁检测文件(wsusscan.cab)</code></p><h4 id="2-flutter-sdk-降级、回退、升级降级到指定的版本方法"><a href="#2-flutter-sdk-降级、回退、升级降级到指定的版本方法" class="headerlink" title="2. flutter sdk 降级、回退、升级降级到指定的版本方法"></a>2. flutter sdk 降级、回退、升级降级到指定的版本方法</h4><p><span style="color: green;">解决：<code>git reset --hard &lt;commit版本号&gt;</code></span></p><ul><li>进入<a href="https://github.com/flutter/flutter" target="_blank" rel="noopener">Flutter Git 源码</a>，release &gt; tags &gt; 拿到 commit 版本</li></ul><p><strong>切换 flutter sdk</strong><br>flutter 安装目录中执行：<code>git checkout v0.1.9</code>****<br>然后运行：<code>flutter doctor</code></p><h4 id="3-Waiting-for-another-flutter-command-to-release-the-startup-lock…"><a href="#3-Waiting-for-another-flutter-command-to-release-the-startup-lock…" class="headerlink" title="3. Waiting for another flutter command to release the startup lock…"></a>3. Waiting for another flutter command to release the startup lock…</h4><p><span style="color: green;">解决：删除 lockfile 文件</span></p><ul><li>打开 flutter/bin/cache/lockfile，删除</li><li>或者用命令：<code>rm ./flutter/bin/cache/lockfile</code></li></ul><h4 id="4-Flutter-android-GradleException-显示红色报错解决办法"><a href="#4-Flutter-android-GradleException-显示红色报错解决办法" class="headerlink" title="4. Flutter android GradleException 显示红色报错解决办法"></a>4. Flutter android GradleException 显示红色报错解决办法</h4><p><span style="color: green;">解决：</span></p><pre><code>throw new GradleException(...)</code></pre><p>替换</p><pre><code>throw new Exception(...)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack浅学习</title>
      <link href="2020/06/07/front-end/tool/webpack-qian-xue-xi/"/>
      <url>2020/06/07/front-end/tool/webpack-qian-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>几乎每个项目用到 <code>Webpack</code>，花时间系统地学习了下。<br>第一遍学基础，整理了如下思维导图，留坑待更新。</p><p><img src="/static/xmind/200607.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《最好的告别》</title>
      <link href="2020/05/24/book/other/zui-hao-de-gao-bie/"/>
      <url>2020/05/24/book/other/zui-hao-de-gao-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="这本书整体谈了什么？"><a href="#这本书整体谈了什么？" class="headerlink" title="这本书整体谈了什么？"></a>这本书整体谈了什么？</h3><p>全书穿插事例，探究了衰老与死亡以及如何优雅跨越生命终点。附读书笔记思维导图。</p><p><a href="https://book.douban.com/subject/26576861/" target="_blank" rel="noopener">豆瓣传送门</a></p><h3 id="细部说了什么？"><a href="#细部说了什么？" class="headerlink" title="细部说了什么？"></a>细部说了什么？</h3><ol><li>医学教我们认识衰老与死亡</li><li>述了美国的临终医疗、护理和养老三大话题</li><li>人生因为自主而有价值</li><li>该为死亡做些什么准备</li></ol><h3 id="它与我关系是什么？"><a href="#它与我关系是什么？" class="headerlink" title="它与我关系是什么？"></a>它与我关系是什么？</h3><p>这是本温柔而又充满力量的书。怀着对衰老与死亡的迷茫和恐惧，看完后，我坦然。<br>思考死亡是为了活的更好，推荐此书。</p><p><img src="/static/xmind/200524.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 书影音 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 思维导图 </tag>
            
            <tag> 社会科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《如何阅读一本书》</title>
      <link href="2020/05/02/book/other/ru-he-yue-du-yi-ben-shu/"/>
      <url>2020/05/02/book/other/ru-he-yue-du-yi-ben-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="这本书整体谈了什么？"><a href="#这本书整体谈了什么？" class="headerlink" title="这本书整体谈了什么？"></a>这本书整体谈了什么？</h3><p>一本实用型的书，核心教导了读者如何择书并主动阅读，讲述阅读的四种层次，以及每种层次所需要的、截然不同的阅读方法。部分叙述冗长重复，可选择性略读。附读书笔记思维导图。<br><a href="https://book.douban.com/subject/1013208/" target="_blank" rel="noopener">豆瓣传送门</a></p><h3 id="细部说了什么？"><a href="#细部说了什么？" class="headerlink" title="细部说了什么？"></a>细部说了什么？</h3><p>做一个有自我要求的读者，养成主动阅读的习惯。</p><ol><li>读前四问，读后解决问题</li><li>速读抓出重点，认识其值不值得再读</li><li>解构阅读以做笔记的形式</li><li>尊重并理性评断一本书</li></ol><h3 id="这本书写的有道理吗？"><a href="#这本书写的有道理吗？" class="headerlink" title="这本书写的有道理吗？"></a>这本书写的有道理吗？</h3><p>有一定的道理，给了一套系统的阅读技巧。但是作者的思想有点片面，阅读方式对文学作品也有一定的局限性。</p><h3 id="它与我关系是什么？"><a href="#它与我关系是什么？" class="headerlink" title="它与我关系是什么？"></a>它与我关系是什么？</h3><p>以前自己更多注重阅读感受，现在明白理性阅读也很重要。</p><p><img src="/static/xmind/200502.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> 实用型书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识淘客</title>
      <link href="2020/04/25/life/parttime/chu-shi-tao-ke/"/>
      <url>2020/04/25/life/parttime/chu-shi-tao-ke/</url>
      
        <content type="html"><![CDATA[<p>接触了解淘客后的第二年，觉得自己也可以试试~</p><h2 id="领劵返利教程"><a href="#领劵返利教程" class="headerlink" title="领劵返利教程"></a>领劵返利教程</h2><h3 id="图片教程"><a href="#图片教程" class="headerlink" title="图片教程"></a>图片教程</h3><p><img src="/static/life/tutorialPic.png" alt></p><h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><iframe height="498" width="100%" src="/static/life/tutorialVideo.mp4"></iframe><h2 id="联系我吧"><a href="#联系我吧" class="headerlink" title="联系我吧"></a>联系我吧</h2><p>感兴趣的话联系我吧~</p><ul><li><strong>微信</strong><br>jjcq9981</li><li><strong>QQ</strong><br><a href="tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=643382875" class="tooltipped" data-tooltip="QQ联系我: 643382875" data-position="top" data-delay="50" target="_blank" rel="noopener">643382875</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 兼职 </tag>
            
            <tag> 淘客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js之组件间通信</title>
      <link href="2019/09/29/front-end/vue/vue-zhi-zu-jian-tong-xun/"/>
      <url>2019/09/29/front-end/vue/vue-zhi-zu-jian-tong-xun/</url>
      
        <content type="html"><![CDATA[<p><code>Vue</code> 组件间的通信是 <code>Vue</code> 开发中很基础也十分重要的部分，写一个 Vue 工程，实际是在写一个个的组件。下面根据场景介绍组件间常用的几种通信方式~ 文章只贴出重点代码，详细代码戳demo链接~ 戳戳戳~</p><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><h3 id="props-和-emits"><a href="#props-和-emits" class="headerlink" title="props 和 $emits"></a>props 和 $emits</h3><p><strong>场景1：父组件给子组件取名字（子组件的‘name’为父组件传递）</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dad<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subcomponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        I am a {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>props: ['name']</code></pre><p><code>props</code> 可以是数组或对象，为对象时允许配置高级选项，如类型检测、自定义验证和设置默认值。<br><a href="https://cn.vuejs.org/v2/guide/components-props.html" target="_blank" rel="noopener">prop更详细信息戳这里</a></p><hr><p><strong>场景2：子组件召唤父组吃饭啦（子组件的通过$emit传递事件给父组件）</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dad<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">@calldad</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>receivedMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>calldad<span class="token punctuation">'</span>, <span class="token punctuation">'</span>Dad,开饭拉！<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>callDad<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><a href="https://codepen.io/axp97/pen/ZEzqJPa" target="_blank" rel="noopener">戳demo看效果</a></p><blockquote><p><strong>总结</strong>：父组件通过 <code>prop</code> 给子组件下发数据，子组件通过 <code>$emit</code> 触发事件给父组件发送消息，即 <code>prop</code> 向下传递，事件向上传递。</p></blockquote><h2 id="三层组件通信"><a href="#三层组件通信" class="headerlink" title="三层组件通信"></a>三层组件通信</h2><h3 id="attrs-和-listeners"><a href="#attrs-和-listeners" class="headerlink" title="$attrs 和 $listeners"></a>$attrs 和 $listeners</h3><p><strong>场景1：爷爷组件给孙组件礼物（孙组件的‘gift’为爷爷组件传递）</strong></p><p>这里孙组件要获取搭配爷爷组件传递过来的值，可以用 <strong>props逐级传递</strong> ，也可以用Vue2.4.0新增的 <code>$attrs</code> 属性。简单讲的：<code>$attrs</code> 包含所有的父作用域的绑定（除了prop传递的属性、class 和 style ）。在这个场景里，给孙组件上绑定<code>$attrs</code>，获得其父的绑定，可以简便实现。<br><a href="https://cn.vuejs.org/v2/api/#vm-attrs" target="_blank" rel="noopener">$attrs官方介绍戳这里</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dad<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">:gift</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gift<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>data() {    return {      gift: "A lot of candy"    };},</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grandson</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grandson</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Grandson<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Gifts from the Grandpa component: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>{{gift}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>props: ["gift"]</code></pre><p><strong>场景2：孙组件召唤爷爷组件吃饭啦（孙组件触发爷爷组件事件）</strong></p><p>这里孙组件要触发爷爷组件事件，可以用 <strong>$emit逐级触发</strong> ，也可以用Vue2.4.0新增的 <code>$listeners</code> 属性。<code>$listeners</code> 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。<br><a href="https://cn.vuejs.org/v2/api/#vm-listeners" target="_blank" rel="noopener">$listeners官方介绍戳这里</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dad<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">:gift</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gift<span class="token punctuation">"</span></span> <span class="token attr-name">@callgrandpa</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>callgrandpa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>methods: {        callgrandpa(msg) {                alert(msg);        }  }</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grandson</span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$listeners<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grandson</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Grandson<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>callGrandpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>methods: {        onClick() {                this.$emit("callgrandpa", "Grandpa, dinner pull!");        }}</code></pre><p><a href="https://codepen.io/axp97/pen/RwbObQY" target="_blank" rel="noopener">戳demo看效果</a></p><blockquote><p><strong>总结</strong>：三级组件通信时，当爷爷组件需要与孙组件通信，使用<code>$attrs</code>和<code>$listeners</code>更简洁。</p></blockquote><h2 id="多级组件通信"><a href="#多级组件通信" class="headerlink" title="多级组件通信"></a>多级组件通信</h2><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><p><code>EventBus</code> 通过新建一个 <code>Vue</code> 事件 <code>bus</code> 对象，然后通过 <code>bus.$emit</code> 触发事件，<code>bus.$on</code> 监听触发的事件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// event-bus.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// send messages</span>EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>channel<span class="token punctuation">:</span> string<span class="token punctuation">,</span> <span class="token function">callback</span><span class="token punctuation">(</span>payload1<span class="token punctuation">,</span>…<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// listen to receive messages</span>EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>channel<span class="token punctuation">:</span> string<span class="token punctuation">,</span> <span class="token function">callback</span><span class="token punctuation">(</span>payload1<span class="token punctuation">,</span>…<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>当我们需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。<br><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">戳Vuex官网链接</a></p><blockquote><p><strong>总结</strong>：EventBus 适用于小型简单项目，中大型项目用Vuex管理，当项目过于庞大, 可将 store 分割成模块。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
